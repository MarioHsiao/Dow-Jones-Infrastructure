//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.HeadlineListCarousel.HeadlineListCarousel.js", "text/javascript")]
[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.HeadlineListCarousel.HeadlineListCarousel.css", "text/css")]

namespace DowJones.Web.Mvc.UI.Components.HeadlineListCarousel
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Security;
    using System.Web.UI;
    using DowJones.Extensions;
    using DowJones.Web.Mvc.Extensions;
    using DowJones.Web.Mvc.UI.Components.HeadlineList;
    using System.Collections.ObjectModel;
    using DowJones.Web.Mvc.UI.Components.Common.Types;
    
    // Last Generated Timestamp: 05/31/2012 05:34 PM
    [DowJones.Web.ScriptResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.HeadlineListCarousel.HeadlineListCarousel.js", ResourceKind=DowJones.Web.ClientResourceKind.Script, DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.HeadlineListCarousel.HeadlineListCarousel))]
    [DowJones.Web.StylesheetResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.HeadlineListCarousel.HeadlineListCarousel.css", ResourceKind=DowJones.Web.ClientResourceKind.Stylesheet, DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.HeadlineListCarousel.HeadlineListCarousel))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorViewComponentClassGenerator", "0.0.0.30158")]
    public class HeadlineListCarousel : DowJones.Web.Mvc.UI.ViewComponentBase<DowJones.Web.Mvc.UI.Components.Models.HeadlineListCarouselModel>
    {
#line hidden

        public HeadlineListCarousel()
        {
        }
        public override string ClientPluginName
        {
            get
            {
                return "dj_HeadlineListCarousel";
            }
        }
        public override void ExecuteTemplate()
        {










   
    CssClass = "dj_HeadlineListCarousel";
    DJ.ScriptRegistry()
            .WithJQueryTools(); 



 if (Model != null && Model.HeadlineList != null && Model.HeadlineList.Headlines != null && Model.HeadlineList.Headlines.Count()>0)
{
    int i = 0;
    int pagesize = Model.NumberOfHeadlinesToScrollBy;
    int j = 0;

WriteLiteral("   <a class=\"prev browse\"></a>   \r\n");



WriteLiteral("   <a class=\"next browse \"></a>  \r\n");



WriteLiteral("    <div class=\"scrollable\" id = \"scroller\">\r\n        <!-- root element for the i" +
"tems -->\r\n         <div class=\"items\" id=\"carouselItemListID\" data-pageSize=\"");


                                                              Write(Model.NumberOfHeadlinesToScrollBy);

WriteLiteral("\" data-scrollSpeed=\"");


                                                                                                                    Write(Model.AutoScrollSpeed);

WriteLiteral("\">\r\n");


             foreach (HeadlineModel headline in Model.HeadlineList.Headlines)
            {
                if (i == 0 || i % pagesize == 0)
                {
                    
                    if (i != 0)
                    {             
                
            Write("</div>");

                           
                    }
                
            Write("<div>");

                          
                }

WriteLiteral("                <div class=\"carouselItem");


                                    Write((Model.SelectedAccessionNo.Equals(headline.AccessionNumber,StringComparison.CurrentCultureIgnoreCase))?" Selected":"");

WriteLiteral("\" data-headlineInfo=\"");


                                                                                                                                                                                 Write(headline.HeadlineInfo.ToJson().EscapeForHtml());

WriteLiteral("\" data-index=\"");


                                                                                                                                                                                                                                               Write(i);

WriteLiteral("\">\r\n");


                     if (Model.HeadlineList.IsThumbnailVisible(i, headline))
                        {

WriteLiteral("                            <div class=\"articleImage\">\r\n                         " +
"       <img src=\"");


                                     Write(headline.ThumbnailUrl);

WriteLiteral("\" alt=\"");


                                                                  Write(headline.TruncatedTitle);

WriteLiteral("\" />\r\n                            </div>\r\n");


                        }

WriteLiteral("                    <a class=\"title\" href=\"javascript:void(0)\" rel=\"");


                                                               Write(headline.ExternalUrl);

WriteLiteral("\" title=\"");


                                                                                             Write(Model.HeadlineList.GetHoverSnippet(headline.Snippet, i));

WriteLiteral("\">");


                                                                                                                                                       Write(headline.Title);

WriteLiteral("</a>\r\n                    <div class=\"meta\">                   \r\n                " +
"        <span class=\"source ");


                                        Write(headline.IsLocked ? "locked" : "unlocked");

WriteLiteral("\" data-source=\"");


                                                                                                  Write(headline.SourceCode);

WriteLiteral("\">");


                                                                                                                        Write(headline.Source);

WriteLiteral("</span>\r\n                        <span class=\"date-stamp\">");


                                             Write(string.Join(", ", new[] { headline.PublicationDateDisplay, headline.WordCount, headline.Language }.Where(s => !string.IsNullOrWhiteSpace(s))));

WriteLiteral("</span>\r\n                    </div>\r\n               \r\n");


                 if (Model.HeadlineList.DisplaySnippets == SnippetDisplayType.Inline ||
                (i == 0 && Model.HeadlineList.DisplaySnippets == SnippetDisplayType.Hybrid))
                {

WriteLiteral("                    <p class=\"snippet\">\r\n                        ");


                   Write(headline.Snippet);

WriteLiteral("\r\n                    </p>\r\n");


                }

WriteLiteral("             </div>\r\n");


                i++;
            }

WriteLiteral("        </div>\r\n    </div>\r\n");


 
}


        }
    }
}
