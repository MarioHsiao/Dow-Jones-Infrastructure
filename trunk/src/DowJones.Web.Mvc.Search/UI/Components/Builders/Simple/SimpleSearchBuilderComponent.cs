//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.Search.UI.Components.Builders.Simple.SimpleSearchBuilder.js", "text/javascript")]

namespace DowJones.Web.Mvc.Search.UI.Components.Builders.Simple
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.Mvc;
    using System.Web.Mvc.Html;
    using DowJones.Web.Mvc.Extensions;
    using DowJones.Web.Mvc.UI.Components.AutoSuggest;
    using DowJones.Web.Mvc.Search.UI.Components.Builders;
    using DowJones.Extensions;
    
    // Last Generated Timestamp: 11/14/2011 07:14 PM
    [DowJones.Web.ScriptResourceAttribute(null, ResourceName="DowJones.Web.Mvc.Search.UI.Components.Builders.Simple.SimpleSearchBuilder.js", ResourceKind=DowJones.Web.ClientResourceKind.Script, DeclaringType=typeof(DowJones.Web.Mvc.Search.UI.Components.Builders.Simple.SimpleSearchBuilderComponent))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorViewComponentClassGenerator", "0.0.0.30158")]
    public class SimpleSearchBuilderComponent : QueryBuilderComponent<Simple.SimpleSearchBuilder>
    {
#line hidden

        public SimpleSearchBuilderComponent()
        {
        }
        public override string ClientPluginName
        {
            get
            {
                return "dj_SimpleSearchBuilder";
            }
        }
        public override void ExecuteTemplate()
        {







WriteLiteral("\r\n");



WriteLiteral("\r\n");


   
    CssClass += "dj_SimpleSearchBuilder";
    Html.DJ().AutoSuggest();


WriteLiteral("    ");


Write(Html.Hidden("kind", "simple"));

WriteLiteral("\r\n    ");


Write(Html.HiddenFor("inclusions", Model.Inclusions));

WriteLiteral("\r\n\r\n    <input type=\"hidden\" name=\"startDate\" value=\"");


                                            Write(Model.StartDate);

WriteLiteral("\" />\r\n    <input type=\"hidden\" name=\"endDate\" value=\"");


                                          Write(Model.EndDate);

WriteLiteral("\" />\r\n        \r\n    <div class=\"dj_search-simple-search ui-component js_search-si" +
"mple-search\">\r\n\r\n            <div class=\"search-bar clearfix\">\r\n            \r\n  " +
"              ");


           Write(Html.TextBox("freeText", Model.FreeText, new { @class = "search-field" }));

WriteLiteral("\r\n            \r\n                <div class=\"search-buttons\">\r\n    \t\t\t\t<input type" +
"=\"reset\" class=\"search-clear\" value=\"");


                                                   Write(DJ.Token("clear"));

WriteLiteral("\" />\r\n    \t\t\t\t<input type=\"submit\" class=\"search-submit\" value=\"");


                                                     Write(DJ.Token("search"));

WriteLiteral(@""" />
    			</div>
            </div>
            
            <div class=""search-options clearfix"">
                <div class=""source-range-options"">
                    <select id=""source"" name=""source"" class=""dj_selectbox dj_selectbox-small"">
                        <option value="""">");


                                    Write(DJ.Token("allSources"));

WriteLiteral("</option>\r\n");


                          
                            if (Model.SourceCollection != null)
                            {
                                
                                if (Model.SourceCollection.TopLevelSourceGrouping != null && Model.SourceCollection.TopLevelSourceGrouping.Count > 0)
                                {
                                    foreach (var source in Model.SourceCollection.TopLevelSourceGrouping)
                                    {

WriteLiteral("                                        <option value=\"");


                                                  Write(source.Key);

WriteLiteral("\" ");


                                                                Write(source.Key == Model.Source ? "selected" : "");

WriteLiteral(">");


                                                                                                               Write(source.Value);

WriteLiteral("</option>    \r\n");


                                    }
                                }

                                if (Model.SourceCollection.SourceList != null && Model.SourceCollection.SourceList.Count > 0)
                                {

WriteLiteral("                                    <optgroup label=\"");


                                                Write(DJ.Token("savedLists"));

WriteLiteral("\">\r\n");


                                      
                                        foreach (var source in Model.SourceCollection.SourceList)
                                        {

WriteLiteral("                                            <option value=\"");


                                                      Write(source.Key);

WriteLiteral("\" ");


                                                                    Write(source.Key == Model.Source ? "selected" : "");

WriteLiteral(">");


                                                                                                                   Write(source.Value);

WriteLiteral("</option>    \r\n");


                                        }
                                    

WriteLiteral("                                    </optgroup>\r\n");


                                }
                            }
                        

WriteLiteral("                    </select>\r\n                    <select id=\"dateRange\" name=\"d" +
"ateRange\" class=\"dj_selectbox dj_selectbox-small\">\r\n");


                          
                            foreach (var dateRange in Model.DateRangeSelections)
                            {

WriteLiteral("                                <option value=\"");


                                          Write(dateRange.Value);

WriteLiteral("\" ");


                                                             Write(dateRange.Selected ? "selected" : "");

WriteLiteral(">");


                                                                                                    Write(dateRange.Text);

WriteLiteral("</option>    \r\n");


                            }
                        

WriteLiteral("                    </select>\r\n                </div>\r\n\r\n                <div cla" +
"ss=\"save-options\">\r\n                \r\n                    <span class=\"dj_btn dj" +
"_btn-lrg dj_btn-gray dj_btn-rounded-square save-as_btn\">\r\n\t\t                ");


             Write(DJ.Token("saveAs"));

WriteLiteral("\r\n\t\t                <span class=\"dj_btn-down-arrow\"></span>\r\n\t                </s" +
"pan>\r\n\r\n                    <a href=\"#\" class=\"advanced-search\">");


                                                   Write(DJ.Token("advancedSearch"));

WriteLiteral("</a>\r\n                    \r\n                </div>\r\n                \r\n           " +
" </div>\r\n        \r\n    </div>\r\n\r\n    <div class=\"suggestions\">\r\n");


     if (Model.SpellCorrection != null)
    {

WriteLiteral("        <div class=\"dj_keyword-spellcheck ui-component\">\r\n\t        <span class=\"t" +
"itle\">");


                        Write(DJ.Token("keywordSpellcheck"));

WriteLiteral("</span>\r\n            <span class=\"replacement-text\">");


                                      Write(Model.SpellCorrection);

WriteLiteral("</span>\r\n\t        <span class=\"dj_close-section dj_icon dj_icon-close-dark-gray\">" +
"</span>\r\n        </div>\r\n");


    }

WriteLiteral("    \r\n");


     if (Model.HasRecognizedEntities)
    {
        
   Write(ComponentFactory.Render(Model.DidYouMean));

                                                  
        
   Write(Html.Hidden("hideDYM", Model.DidYouMean.HideEntities.ToString().ToLower()));

                                                                                   
    }

WriteLiteral("    </div>\r\n\r\n<!-- Save As Menu -->\r\n<div class=\"menu saveAsMenu\" style=\"display:" +
"none;\">\r\n    <div class=\"menuitems\">\r\n");


          
            foreach (SelectListItem menu in Model.SaveOptions)
            {

WriteLiteral("                <div class=\"menuitem\">\r\n                    <div class=\"label\" da" +
"ta-saveas=\"");


                                               Write(menu.Value);

WriteLiteral("\">");


                                                            Write(menu.Text);

WriteLiteral("</div>\r\n                </div>\r\n");


            }
        

WriteLiteral("    </div>\r\n</div>\r\n<!-- Save As Menu -->\r\n\r\n        \r\n");


        }
    }
}
