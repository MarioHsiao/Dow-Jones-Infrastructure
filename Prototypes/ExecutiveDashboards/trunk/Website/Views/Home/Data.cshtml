@{
    ViewBag.Title = "Home Page";
}

<section id="dashboard" class="row-fluid">

    <div id="clock" class="small module" data-type="Clock"></div>

    <div id="current-users" class="medium module" data-type="CurrentUserStats"></div>

    <div id="top-pages" class="medium module" data-type="TopPages"></div>

</section>


    <script id="clock-template" type="text/x-template">
        <h2>Clock</h2>
        <p><%= new Date(Time).toTimeString() %></p>
    </script>
    
    <script id="current-users-template" type="text/x-template">
        <h2>Current Users</h2>
        <p>Desktop: <%= numberWithCommas(DesktopUserCount) %></p>
        <p>Mobile: <%= numberWithCommas(MobileUserCount) %></p>
    </script>
    
<script id="top-pages-template" type="text/x-template">
        <% var pages = Result.resultSet.headlines; %>
        <h2>Top Pages</h2>
        <ul>
            <% for(var i = 0; i <= pages.length; i += 1) { 
                var page = pages[i];
                if(!page) continue;
            %>
            <li><%= page.title %></li>
            <% } %>
        </ul>
    </script>



<script src="@Url.Content("~/signalr/hubs")" type="text/javascript"></script>
<script type="text/javascript">
    @DJ.ScriptRegistry().OnDocumentReady("initializeDashboard();");

    function numberWithCommas(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    var templates = window['templates'] = {};
    $(function () {
        $('[type="text/x-template"]').each(function() {
            templates[this.id] = _.template($(this).html());
        });
    });

    // Temp "shim" to make jQuery elements act like DJ components
    $.fn.setData = function (data) {
        var template = templates[this.attr('id') + '-template'];
        this.html(template(data));
    };

    function initializeDashboard() {
        $.connection.dashboard.dataReceived = function (type, data) {
            try {
                var module = $('.module[data-type=' + type + ']');
                module.setData(data);
            } catch (e) {
                DJ.$dj.error(e);
            } 
        };
        $.connection.hub.start();

        $('.small.module').addClass('span2');
        $('.medium.module').addClass('span4');
        $('.large.module').addClass('span6');
        $('.x-large.module').addClass('span8');
/*
        DJ.$dj.require(['https://raw.github.com/desandro/isotope/master/jquery.isotope.min.js'], function () {
            DJ.$dj.loadStylesheet('https://raw.github.com/desandro/isotope/master/css/style.css');
            $('#dashboard').isotope({
                itemSelector: '.module',
                layoutMode: 'fitRows'
            });
        });*/
    }
</script>
