Continuous Integration Guidelines

Executive Summary
The DJ Infrastructure solution has Continuous Integration builds in place. Please avoid committing breaking changes and run the TFS Build Notifications system tray application to be notified when you do break the build.

Continuous Integration Builds
We have Continuous Integration builds configured on the project trunk which compile the solution and execute the unit tests on every checkin.  As such, any changes you check in have the potential to “break the build”, which means that no one on the team can continue working!  This document contains processes, tips, and tricks focused on avoiding this situation.

Working with Continuous Integration
The following is a list of required procedures and/or best practices targeted toward keeping the build from breaking.
Always fix the build immediately after breaking it
Fixing a broken build is the entire team’s top priority.  When you commit a change that breaks the build, drop everything you are doing and focus on checking in a fix to make the build (and the team) happy again.  Remember, when the build server cannot build the solution, neither can the rest of the team – and that means you are keeping everyone from working!
Always get latest and run all unit tests prior to every check-in
Please take the standard precautions of compiling and running the unit tests locally. The following steps are required prior to any check-in.  If you follow these steps, your chances of breaking the build are drastically reduced.
1) Perform a Get Latest from the Source Control Explorer
a. Using the Get Latest context action on a project or the solution in Visual Studio may be a nice shortcut for normal development, but it does not guarantee that you have the latest of everything.
2) Rebuild the entire solution
3) Execute the unit tests.
a. TestDriven.NET is a great tool that provides the ability to run unit tests from a context menu pretty much anywhere in Visual Studio
b. ReSharper users can right click on the Solution and select “Run Unit Tests”. 
c. Everyone else can use the Visual Studio test runner located in Test > Run > All Tests in Solution  (or Ctl-R, A).

Always wait to see the results of your build
To keep up-to-date with the status of the builds, run the TFS Build Notifications system tray application mentioned below.  DO NOT “commit and run” - no Ninja Commits!

Do not check-in on top of a broken build
The only check-ins that should occur once the build is broken are changesets that fix the issues that lead to the broken build.  If you have pending changes that will not fix the build, please wait to commit them until after the build is fixed.  If they must be committed immediately, offer to help fix the build!

Our current check in policy will trigger an error when you try to check in on top of broken build.  When policy exceptions occur, do not simply select “override”.  Check-in policies are in place to encourage the proper processes, and overriding them is rarely the correct option:  instead, focus on fixing the issue to make the policy exceptions go away.

Avoid breaking the build by using Shelvesets or working in a branch
If you intend to make major changes that may break the build or otherwise interrupt the workflow for other members on the team, please make a branch under $/Dow Jones Infrastructure/branches and proceed to break your branch all you like – branches are not included in the Continuous build.  Feel free to merge your branch back into the trunk whenever you feel it is stable enough to do so.   However, please note:  working outside of the trunk might be a good short-term solution for some changes, but inevitably leads to trouble when the branch lives too long.  So, try to keep your branches focused and short-lived.


Use the TFS Build Notifications system tray app
Unfortunately, we do not have email-based build notifications configured right now so until we do, it is your responsibility to make sure that your commits do not break the build.  The easiest way to watch the current build status is using the TFS Build Notifications tool (the image below shows where it resides in my Start menu).



Configuration is a breeze – simply select the builds you wish to observe.  Please watch the Continuous build at the very least.  The Nightly build is not currently 100% so it’s being reported as failing right now – I’ll fix that soon, and until it’s fixed you can feel free to ignore it or just not select it.




