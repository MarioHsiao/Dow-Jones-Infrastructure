[[IMPORTANTFUNKYBEHAVIOR, Error: Package could not be found]]
==== I receive the error that a "package could not be found"
The current version of the NuGet Library Package Manager includes some unintuitive behavior: if you choose a specific package source (as shown in <<AddingANuGetPackageReference>>) and attempt to install a package that relies on a package in another repository (like the DowJones.Infrastructure package shown in the image relies on the Newtonsoft.Json library which lives in the public repository), you will get an error that the other package cannot be found. This is due to the way that NuGet currently manages packages across repositories.

*Workaround*:

In order to successfully install a package with dependencies that span repositories, *you must select the "All" package source*, then search for your package using the search box. Then, you can install the package from the list of search results.

==== I receive the error "contents of the package could not be verified"
This is a http://nuget.codeplex.com/workitem/604[documented bug with NuGet server].  First off, be sure to vote on the issue on the NuGet site so that it gets fixed.

*Workaround*:

. Close all instances of Visual Studio
. Clear your WinINET cache (temporary internet files)
+
Though there are several ways to do this, the easiest way is with the `Tools > Clear WinINET Cache` option in Fiddler.
. If the problem continues after you have attempted the workaround, contact one of the Dow Jones NuGet repository administrators.

==== I receive an +System.OutOfMemoryException+ while installing or updating a package
For packages with many/deep dependencies, NuGet uses a good deal of memory. Since most of our machines are 32-bit and only have 3.5GB accessible, this is often a problem.

*Workaround*:

. Close all instances of Visual Studio
. Open the solution and try again.  
. If it continues to be an issue, try to install one of the lower-level dependencies first, then retry the original package.  
+
For instance, if 'DowJones.Web.Mvc' depends on 'DowJones.Infrastructure' and attempts to install 'DowJones.Web.Mvc' fail with an +OutOfMemoryException+, try to install the 'DowJones.Infrastructure' package first, then attempt the 'DowJones.Web.Mvc' package.

==== A Release build succeeds, but the new version of the package does not show in the feed
Packages should be available immediately (within a few seconds) of the successful build.  
In rare cases they might take a minute or two to show up, but it should never be more than a few minutes.
If a Release build succeeds that is supposed to generate a new version of a package in our custom feeds but you do not see a new version, something probably went wrong.

Unfortunately, there is not much you can do about this, as it is probably a backend/server issue that needs to be addressed by an admin. 
You can, however, attempt to try the build again. To do this, select the `Queue New Build...` option in the build's context menu to trigger a new build.

If this does not fix the issue, contact a build administrator.