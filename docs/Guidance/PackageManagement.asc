[[PackageManagement]]
== Package Management
Dow Jones .NET development projects use the http://nuget.org/[NuGet package management system] to manage project dependencies and references. Each individual NuGet package represents a version of a particular library or API. The http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c[NuGet Package Manager] is a Visual Studio extension that allows for easy management of NuGet packages within a Visual Studio solution.

TIP: If you have questions that this page does not adequately answer, please visit the http://nuget.codeplex.com/documentation[official NuGet documentation site] for additional information on how to configure, use, and create NuGet packages.

NuGet packages (really just ZIP archives with some metadata) are downloaded from a remote repository, expanded locally, and stored in a folder named 'packages' in the current solution.  Then, the NuGet Package Manager adds the appropriate Project References (on a per-project basis) to the local assemblies in the 'packages' folder.  As such, the contents of the 'packages' folder and its children is crucial to the build process, so *always be sure to check in changes to the 'packages' folder*.

[[PackageSources]]
=== Dow Jones NuGet Repositories
include::PackageManagement_DowJonesPackageSources.asc[]

=== Configuring the Dow Jones Package Source
Before you can start adding the custom Dow Jones NuGet packages, you must first tell Visual Studio and NuGet where to find them by following the steps below:

==== Open the NuGet Library Package Manager Settings
In order to add NuGet packages, their package source must be listed in your Library Package Manager sources list, which can be found under `Tools > Library Package Manager > Package Manager Settings`:

image:images/NuGet_Navigation.png[]

This will open the Package Manager Settings dialog below:

[[NuGetPackageManagerSettings]]
image:images/NuGet_PackageSources.png[]

Finally, for each source shown in <<PackageSources>>, populate the Name and Source boxes and click the `Add` button:

If all has gone well, you should have the Dow Jones Package Sources listed in your Available package sources list.

=== Adding a NuGet package to your project
You can add, remove, and update packages using either the Add Library Package Reference dialog box or by using PowerShell command-line commands in the Package Manager Console window. The following illustration shows the Add Library Package Reference dialog box.

[[AddingANuGetPackageReference]]
image:images/NuGet_AddPackageReference.png[]

In order to install a package, simply select the package and click "Install". The package manager will automatically download and configure the package in your project.

After the package has been sucessfully installed, you should see it listed in your project's References and the files should reside in the 'packages' folder in your solution's root folder.

For example, if your project's folder path is
	C:\Code\TestSolution\TestProject
then your packages folder path should be
	C:\Code\TestSolution\packages

==== NuGet Packages and Version Control
By default, NuGet attempts to add packages to version control when working in a version-controlled project. Be sure to include the package changes in your checkins.

=== Upgrading All NuGet Packages in a Solution
The NuGet Package Manager doesn't currently support upgrading a package in multiple projects in a single operation, however there is a https://gist.github.com/1082558[PowerShell script] that helps make this easier.

To use this script, first save it to your solution's root folder (where your .sln file resides) and name it [role="filename"]'Upgrade-Packages.ps1'. Then, when you need to upgrade an installed package to the latest version, open the Package Manager Console and execute the script with the following syntax:

	.\Upgrade-Packages.ps1 [Package Name Pattern]

For example:

	.\Upgrade-Packages.ps1 DowJones.*

Or, simply:

	.\Upgrade-Packages.ps1


=== Adding New Packages to the Repository
In order to be used in a project, NuGet packages must first be added to a (server-side) repository so that they are available to the NuGet client.

Technically speaking, adding packages to a repository is as simple as generating the package and copying it to the repository folder.
We have automated this process wherever possible, relying instead on automated builds to generate and copy new package versions to our custom NuGet repositories.

Though it may be different for a given solution, this is the general workflow we attempt to follow:

. Check into the main development branch (the "/trunk" folder)
. Merge changes from trunk to release branch (a folder underneath the "/releases" folder)
. Watch for Release build to queue and complete
	* *Success* => New version of NuGet package should be available in the NuGet repository immediately
	* *Failure* => Fix the issues and start the process over again (no new NuGet package released)


[[PackageManagement_BestPractices]]
=== Best Practices
include::PackageManagement_BestPractices.asc[]

[[PackageManagement_WhatToDoI]]
=== What To Do If...
include::PackageManagement_WhatToDoIf.asc[]