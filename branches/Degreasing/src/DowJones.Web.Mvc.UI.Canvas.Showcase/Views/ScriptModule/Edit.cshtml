@using DowJones.Pages.Modules.Templates
@model DowJones.DegreasedDashboards.Website.Models.EditScriptModuleTemplateRequest
@{
    ViewBag.Title = (Model.IsNew ? "New" : "Edit") + " Script Module Template";
}

<style>
#Script { min-height: 250px; }
input[type=text], textarea { width: 99%; }
.options .actions { width: 30px;text-align: center; }
.options tbody .option .add-option { display: none; }
.options tfoot .option .delete-option { display: none; }
.options .validation-message { display: none;  }
.options .alert-error .validation-message { display: block; }
.options input[type=text], .options textarea { width: 90%; }

.external-includes { list-style: none;}
.external-includes .include { padding: 0 0 7px 0; }
.external-includes input[type=text] { width: 50%; }
.external-includes .delete-option { display: none; }
.external-includes .include .delete-option { display: inline-block; }

</style>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm("Edit", "ScriptModule", FormMethod.Post, new { @class = "edit-script-module form-horizontal" }))
{
    if(TempData["ReturnUrl"] != null){
        @Html.Hidden("returnUrl", TempData["ReturnUrl"])
    }
    
    @Html.ValidationSummary(true)
    <fieldset>
        @Html.HiddenFor(x => x.Id)

        <div class="editor-label">
            @Html.LabelFor(model => model.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Title)
            @Html.ValidationMessageFor(model => model.Title)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Description)
            @Html.ValidationMessageFor(model => model.Description)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Html)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Html)
            @Html.ValidationMessageFor(model => model.Html)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => Model.Script)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => Model.Script)
            @Html.ValidationMessageFor(model => Model.Script)
        </div>
        
        <fieldset>
            <label>External Includes</label>
                
            <ul class="external-includes">
            @foreach (var include in Model.ExternalIncludes)
            {
                <li class="include">@ExternalInclude(include)</li>
            }
                <li>
                    <span class="input-prepend">
                    <span class="add-option btn add-on"><span class="icon-plus-sign"></span></span>@ExternalInclude()
                    </span>
                </li>
            </ul>
            
            @helper ExternalInclude(string include = null) 
            {<a class="delete-option add-on btn btn-mini btn-danger"><span class="icon-remove icon-white"></span></a><input type="text" class="input-medium" value="@include"/>}

        </fieldset>

        <fieldset>
            
        <label>Options</label>
            <table class="options table table-striped table-bordered table-condensed">
                <thead>
                    <th></th>
                    <th>Name</th>
                    <th>Display Name</th>
                    <th>Default Value</th>
                </thead>
            
                <tbody>
                    @foreach (var option in Model.Options)
                    {
                        @OptionRow(option)
                    }
                </tbody>
            
                <tfoot>
                    @OptionRow()
                </tfoot>
            </table>
            
            @helper OptionRow(ScriptModuleTemplateOption option = null)
            {
                option = option ?? new ScriptModuleTemplateOption();
    
                <tr class="option">
                    <td class="actions">
                        <a class="add-option btn btn-mini"><span class="icon-plus-sign"></span></a>
                        <a class="delete-option btn btn-mini btn-danger"><span class="icon-remove icon-white"></span></a>
                    </td>

                    <td class="editor-field">
                        <input type="text" name="Name" value="@option.Name" data-val="false" data-val-required="true" />
                        <span class="validation-message" data-valmsg-for="Name">The option must have a name</span>
                    </td>
            
                    <td class="editor-field">
                        <input type="text" name="DisplayName" value="@option.DisplayName" data-val="false" />
                        <span class="validation-message" data-valmsg-for="DisplayName">*</span>
                    </td>
            
                    <td class="editor-field">
                        <input type="text" name="DefaultValue" value="@option.DefaultValue" data-val="false" />
                        <span class="validation-message" data-valmsg-for="DefaultValue">*</span>
                    </td>
                </tr>
            }

        </fieldset>

        <p class="actions">
            <input class="save btn btn-primary" type="submit" value="Save" />
            <a class="cancel btn" href="javascript:history.back(-1)">Cancel</a>
        </p>
    </fieldset>
}



<script type="text/javascript">

    @DJ.ScriptRegistry().OnDocumentReady("initializeEditor()")

    function initializeEditor() {
        var module = $('.edit-script-module');
        var optionsTable = $('table.options', module);

        $('.add-option', optionsTable).click(function () {
            var newOption = $('tfoot .option', optionsTable);

            // HACK:  ** WARNING **  SUPER VALIDATION HACK!
            $('.alert-error', newOption).removeClass('alert-error');
            var nameField = $('[name="Name"]', newOption);
            if (nameField.val() === '') {
                nameField.closest('td').addClass('alert-error');
                return false;
            }
            
            $('tbody', optionsTable).append(newOption.clone());
            $(':input', newOption).val('');
        });
        
        optionsTable.on("click", ".delete-option", function () {
            $(this).parents('tr').remove();
        });


        var externalIncludes = $('.external-includes');

        $('.add-option', externalIncludes).click(function() {
            var clone = $(this).closest('li').clone(true);

            $(this).closest('li').addClass('include');

            $(this).remove();

            clone.appendTo(externalIncludes).find(':input').val('');
        });

        $(".delete-option",externalIncludes).click(function () {
            $(this).parents('li').remove();
        });


        $('.save', module).click(function () {

            //alert('TODO:  Merge External Includes into the object!');

            //return false;

            $('li', externalIncludes).each(function (i) {
                $(':input', this).attr('name', function(x, val) {
                    return 'externalIncludes[' + i + ']';
                });
            });

            $('tbody .option', optionsTable).each(function (i) {
                $(':input', this).attr('name', function(x, val) {
                    return 'options[' + i + '].' + val;
                });
            });
        });
    }

</script>