/**
*
* Color picker
* Author: Stefan Petre www.eyecon.ro
* 
* Dual licensed under the MIT and GPL licenses
* 
*/
var ColorPicker = function () { var a = {}, b, c = 65, d, e = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>', f = { eventName: "click", onShow: function () { }, onBeforeShow: function () { }, onHide: function () { }, onChange: function () { }, onSubmit: function () { }, color: "ff0000", livePreview: true, flat: false }, g = function (a, b) { var c = N(a); $(b).data("colorpicker").fields.eq(1).val(c.r).end().eq(2).val(c.g).end().eq(3).val(c.b).end() }, h = function (a, b) { $(b).data("colorpicker").fields.eq(4).val(a.h).end().eq(5).val(a.s).end().eq(6).val(a.b).end() }, i = function (a, b) { $(b).data("colorpicker").fields.eq(0).val(P(a)).end() }, j = function (a, b) { $(b).data("colorpicker").selector.css("backgroundColor", "#" + P({ h: a.h, s: 100, b: 100 })); $(b).data("colorpicker").selectorIndic.css({ left: parseInt(150 * a.s / 100, 10), top: parseInt(150 * (100 - a.b) / 100, 10) }) }, k = function (a, b) { $(b).data("colorpicker").hue.css("top", parseInt(150 - 150 * a.h / 360, 10)) }, l = function (a, b) { $(b).data("colorpicker").currentColor.css("backgroundColor", "#" + P(a)) }, m = function (a, b) { $(b).data("colorpicker").newColor.css("backgroundColor", "#" + P(a)) }, n = function (a) { var b = a.charCode || a.keyCode || -1; if (b > c && b <= 90 || b == 32) { return false } var d = $(this).parent().parent(); if (d.data("colorpicker").livePreview === true) { o.apply(this) } }, o = function (a) { var b = $(this).parent().parent(), c; if (this.parentNode.className.indexOf("_hex") > 0) { b.data("colorpicker").color = c = L(J(this.value)) } else if (this.parentNode.className.indexOf("_hsb") > 0) { b.data("colorpicker").color = c = H({ h: parseInt(b.data("colorpicker").fields.eq(4).val(), 10), s: parseInt(b.data("colorpicker").fields.eq(5).val(), 10), b: parseInt(b.data("colorpicker").fields.eq(6).val(), 10) }) } else { b.data("colorpicker").color = c = M(I({ r: parseInt(b.data("colorpicker").fields.eq(1).val(), 10), g: parseInt(b.data("colorpicker").fields.eq(2).val(), 10), b: parseInt(b.data("colorpicker").fields.eq(3).val(), 10) })) } if (a) { g(c, b.get(0)); i(c, b.get(0)); h(c, b.get(0)) } j(c, b.get(0)); k(c, b.get(0)); m(c, b.get(0)); b.data("colorpicker").onChange.apply(b, [c, P(c), N(c)]) }, p = function (a) { var b = $(this).parent().parent(); b.data("colorpicker").fields.parent().removeClass("colorpicker_focus") }, q = function () { c = this.parentNode.className.indexOf("_hex") > 0 ? 70 : 65; $(this).parent().parent().data("colorpicker").fields.parent().removeClass("colorpicker_focus"); $(this).parent().addClass("colorpicker_focus") }, r = function (a) { var b = $(this).parent().find("input").focus(); var c = { el: $(this).parent().addClass("colorpicker_slider"), max: this.parentNode.className.indexOf("_hsb_h") > 0 ? 360 : this.parentNode.className.indexOf("_hsb") > 0 ? 100 : 255, y: a.pageY, field: b, val: parseInt(b.val(), 10), preview: $(this).parent().parent().data("colorpicker").livePreview }; $(document).bind("mouseup", c, t); $(document).bind("mousemove", c, s) }, s = function (a) { a.data.field.val(Math.max(0, Math.min(a.data.max, parseInt(a.data.val + a.pageY - a.data.y, 10)))); if (a.data.preview) { o.apply(a.data.field.get(0), [true]) } return false }, t = function (a) { o.apply(a.data.field.get(0), [true]); a.data.el.removeClass("colorpicker_slider").find("input").focus(); $(document).unbind("mouseup", t); $(document).unbind("mousemove", s); return false }, u = function (a) { var b = { cal: $(this).parent(), y: $(this).offset().top }; b.preview = b.cal.data("colorpicker").livePreview; $(document).bind("mouseup", b, w); $(document).bind("mousemove", b, v) }, v = function (a) { o.apply(a.data.cal.data("colorpicker").fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, a.pageY - a.data.y))) / 150, 10)).get(0), [a.data.preview]); return false }, w = function (a) { g(a.data.cal.data("colorpicker").color, a.data.cal.get(0)); i(a.data.cal.data("colorpicker").color, a.data.cal.get(0)); $(document).unbind("mouseup", w); $(document).unbind("mousemove", v); return false }, x = function (a) { var b = { cal: $(this).parent(), pos: $(this).offset() }; b.preview = b.cal.data("colorpicker").livePreview; $(document).bind("mouseup", b, z); $(document).bind("mousemove", b, y) }, y = function (a) { o.apply(a.data.cal.data("colorpicker").fields.eq(6).val(parseInt(100 * (150 - Math.max(0, Math.min(150, a.pageY - a.data.pos.top))) / 150, 10)).end().eq(5).val(parseInt(100 * Math.max(0, Math.min(150, a.pageX - a.data.pos.left)) / 150, 10)).get(0), [a.data.preview]); return false }, z = function (a) { g(a.data.cal.data("colorpicker").color, a.data.cal.get(0)); i(a.data.cal.data("colorpicker").color, a.data.cal.get(0)); $(document).unbind("mouseup", z); $(document).unbind("mousemove", y); return false }, A = function (a) { $(this).addClass("colorpicker_focus") }, B = function (a) { $(this).removeClass("colorpicker_focus") }, C = function (a) { var b = $(this).parent(); var c = b.data("colorpicker").color; b.data("colorpicker").origColor = c; l(c, b.get(0)); b.data("colorpicker").onSubmit(c, P(c), N(c), b.data("colorpicker").el) }, D = function (a) { var b = $("#" + $(this).data("colorpickerId")); b.data("colorpicker").onBeforeShow.apply(this, [b.get(0)]); var c = $(this).offset(); var d = G(); var e = c.top + this.offsetHeight; var f = c.left; if (e + 176 > d.t + d.h) { e -= this.offsetHeight + 176 } if (f + 356 > d.l + d.w) { f -= 356 } b.css({ left: f + "px", top: e + "px" }); if (b.data("colorpicker").onShow.apply(this, [b.get(0)]) != false) { b.show() } $(document).bind("mousedown", { cal: b }, E); return false }, E = function (a) { if (!F(a.data.cal.get(0), a.target, a.data.cal.get(0))) { if (a.data.cal.data("colorpicker").onHide.apply(this, [a.data.cal.get(0)]) != false) { a.data.cal.hide() } $(document).unbind("mousedown", E) } }, F = function (a, b, c) { if (a == b) { return true } if (a.contains) { return a.contains(b) } if (a.compareDocumentPosition) { return !!(a.compareDocumentPosition(b) & 16) } var d = b.parentNode; while (d && d != c) { if (d == a) return true; d = d.parentNode } return false }, G = function () { var a = document.compatMode == "CSS1Compat"; return { l: window.pageXOffset || (a ? document.documentElement.scrollLeft : document.body.scrollLeft), t: window.pageYOffset || (a ? document.documentElement.scrollTop : document.body.scrollTop), w: window.innerWidth || (a ? document.documentElement.clientWidth : document.body.clientWidth), h: window.innerHeight || (a ? document.documentElement.clientHeight : document.body.clientHeight) } }, H = function (a) { return { h: Math.min(360, Math.max(0, a.h)), s: Math.min(100, Math.max(0, a.s)), b: Math.min(100, Math.max(0, a.b)) } }, I = function (a) { return { r: Math.min(255, Math.max(0, a.r)), g: Math.min(255, Math.max(0, a.g)), b: Math.min(255, Math.max(0, a.b)) } }, J = function (a) { var b = 6 - a.length; if (b > 0) { var c = []; for (var d = 0; d < b; d++) { c.push("0") } c.push(a); a = c.join("") } return a }, K = function (a) { var a = parseInt(a.indexOf("#") > -1 ? a.substring(1) : a, 16); return { r: a >> 16, g: (a & 65280) >> 8, b: a & 255 } }, L = function (a) { return M(K(a)) }, M = function (a) { var b = { h: 0, s: 0, b: 0 }; var c = Math.min(a.r, a.g, a.b); var d = Math.max(a.r, a.g, a.b); var e = d - c; b.b = d; if (d != 0) { } b.s = d != 0 ? 255 * e / d : 0; if (b.s != 0) { if (a.r == d) { b.h = (a.g - a.b) / e } else if (a.g == d) { b.h = 2 + (a.b - a.r) / e } else { b.h = 4 + (a.r - a.g) / e } } else { b.h = -1 } b.h *= 60; if (b.h < 0) { b.h += 360 } b.s *= 100 / 255; b.b *= 100 / 255; return b }, N = function (a) { var b = {}; var c = Math.round(a.h); var d = Math.round(a.s * 255 / 100); var e = Math.round(a.b * 255 / 100); if (d == 0) { b.r = b.g = b.b = e } else { var f = e; var g = (255 - d) * e / 255; var h = (f - g) * (c % 60) / 60; if (c == 360) c = 0; if (c < 60) { b.r = f; b.b = g; b.g = g + h } else if (c < 120) { b.g = f; b.b = g; b.r = f - h } else if (c < 180) { b.g = f; b.r = g; b.b = g + h } else if (c < 240) { b.b = f; b.r = g; b.g = f - h } else if (c < 300) { b.b = f; b.g = g; b.r = g + h } else if (c < 360) { b.r = f; b.g = g; b.b = f - h } else { b.r = 0; b.g = 0; b.b = 0 } } return { r: Math.round(b.r), g: Math.round(b.g), b: Math.round(b.b) } }, O = function (a) { var b = [a.r.toString(16), a.g.toString(16), a.b.toString(16)]; $.each(b, function (a, c) { if (c.length == 1) { b[a] = "0" + c } }); return b.join("") }, P = function (a) { return O(N(a)) }, Q = function () { var a = $(this).parent(); var b = a.data("colorpicker").origColor; a.data("colorpicker").color = b; g(b, a.get(0)); i(b, a.get(0)); h(b, a.get(0)); j(b, a.get(0)); k(b, a.get(0)); m(b, a.get(0)) }; return { init: function (a) { a = $.extend({}, f, a || {}); if (typeof a.color == "string") { a.color = L(a.color) } else if (a.color.r != undefined && a.color.g != undefined && a.color.b != undefined) { a.color = M(a.color) } else if (a.color.h != undefined && a.color.s != undefined && a.color.b != undefined) { a.color = H(a.color) } else { return this } return this.each(function () { if (!$(this).data("colorpickerId")) { var b = $.extend({}, a); b.origColor = a.color; var c = "collorpicker_" + parseInt(Math.random() * 1e3); $(this).data("colorpickerId", c); var d = $(e).attr("id", c); if (b.flat) { d.appendTo(this).show() } else { d.appendTo(document.body) } b.fields = d.find("input").bind("keyup", n).bind("change", o).bind("blur", p).bind("focus", q); d.find("span").bind("mousedown", r).end().find(">div.colorpicker_current_color").bind("click", Q); b.selector = d.find("div.colorpicker_color").bind("mousedown", x); b.selectorIndic = b.selector.find("div div"); b.el = this; b.hue = d.find("div.colorpicker_hue div"); d.find("div.colorpicker_hue").bind("mousedown", u); b.newColor = d.find("div.colorpicker_new_color"); b.currentColor = d.find("div.colorpicker_current_color"); d.data("colorpicker", b); d.find("div.colorpicker_submit").bind("mouseenter", A).bind("mouseleave", B).bind("click", C); g(b.color, d.get(0)); h(b.color, d.get(0)); i(b.color, d.get(0)); k(b.color, d.get(0)); j(b.color, d.get(0)); l(b.color, d.get(0)); m(b.color, d.get(0)); if (b.flat) { d.css({ position: "relative", display: "block" }) } else { $(this).bind(b.eventName, D) } } }) }, showPicker: function () { return this.each(function () { if ($(this).data("colorpickerId")) { D.apply(this) } }) }, hidePicker: function () { return this.each(function () { if ($(this).data("colorpickerId")) { $("#" + $(this).data("colorpickerId")).hide() } }) }, setColor: function (a) { if (typeof a == "string") { a = L(a) } else if (a.r != undefined && a.g != undefined && a.b != undefined) { a = M(a) } else if (a.h != undefined && a.s != undefined && a.b != undefined) { a = H(a) } else { return this } return this.each(function () { if ($(this).data("colorpickerId")) { var b = $("#" + $(this).data("colorpickerId")); b.data("colorpicker").color = a; b.data("colorpicker").origColor = a; g(a, b.get(0)); h(a, b.get(0)); i(a, b.get(0)); k(a, b.get(0)); j(a, b.get(0)); l(a, b.get(0)); m(a, b.get(0)) } }) } } }(); $.fn.extend({ ColorPicker: ColorPicker.init, ColorPickerHide: ColorPicker.hidePicker, ColorPickerShow: ColorPicker.showPicker, ColorPickerSetColor: ColorPicker.setColor })