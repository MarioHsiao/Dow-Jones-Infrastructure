/**
* jCarousel - Riding carousels with jQuery
*   http://sorgalla.com/jcarousel/
*
* Copyright (c) 2006 Jan Sorgalla (http://sorgalla.com)
* Dual licensed under the MIT (MIT-LICENSE.txt)
* and GPL (GPL-LICENSE.txt) licenses.
*
* Built on top of the jQuery library
*   http://jquery.com
*
* Inspired by the "Carousel Component" by Bill Scott
*   http://billwscott.com/carousel/
*/
$.fn.jcarousel = function (a) { return this.each(function () { new $.jcarousel(this, a) }) }; $.jcarousel = function (a, b) { var a = $(a).get(0); if (a != null) return a.carousel || (a.carousel = new $._jcarousel(a, b)); return null }; var defaults = { vertical: false, start: 1, offset: 1, size: null, scroll: 3, visible: null, animation: "normal", easing: "swing", auto: 0, wrap: null, initCallback: null, reloadCallback: null, itemLoadCallback: null, itemFirstInCallback: null, itemFirstOutCallback: null, itemLastInCallback: null, itemLastOutCallback: null, itemVisibleInCallback: null, itemVisibleOutCallback: null, buttonNextHTML: "<div></div>", buttonPrevHTML: "<div></div>", buttonNextEvent: "click", buttonPrevEvent: "click", buttonNextCallback: null, buttonPrevCallback: null }; $._jcarousel = function (a, b) { this.options = $.extend({}, defaults, b || {}); this.locked = false; this.container = null; this.clip = null; this.list = null; this.buttonNext = null; this.buttonPrev = null; this.wh = !this.options.vertical ? "width" : "height"; this.lt = !this.options.vertical ? "left" : "top"; var c = "", d = a.className.split(" "); for (var e = 0; e < d.length; e++) { if (d[e].indexOf("jcarousel-skin") != -1) { $(a).removeClass(d[e]); var c = d[e]; break } } if (a.nodeName == "UL" || a.nodeName == "OL") { this.list = $(a); this.container = this.list.parent(); if (this.container.hasClass("jcarousel-clip")) { if (!this.container.parent().hasClass("jcarousel-container")) this.container = this.container.wrap("<div></div>"); this.container = this.container.parent() } else if (!this.container.hasClass("jcarousel-container")) this.container = this.list.wrap("<div></div>").parent() } else { this.container = $(a); this.list = $(a).find(">ul,>ol,div>ul,div>ol") } if (c != "" && this.container.parent()[0].className.indexOf("jcarousel-skin") == -1) this.container.wrap('<div class=" ' + c + '"></div>'); this.clip = this.list.parent(); if (!this.clip.length || !this.clip.hasClass("jcarousel-clip")) this.clip = this.list.wrap("<div></div>").parent(); this.buttonPrev = $(".jcarousel-prev", this.container); if (this.buttonPrev.size() == 0 && this.options.buttonPrevHTML != null) this.buttonPrev = this.clip.before(this.options.buttonPrevHTML).prev(); this.buttonPrev.addClass(this.className("jcarousel-prev")); this.buttonNext = $(".jcarousel-next", this.container); if (this.buttonNext.size() == 0 && this.options.buttonNextHTML != null) this.buttonNext = this.clip.before(this.options.buttonNextHTML).prev(); this.buttonNext.addClass(this.className("jcarousel-next")); this.clip.addClass(this.className("jcarousel-clip")); this.list.addClass(this.className("jcarousel-list")); this.container.addClass(this.className("jcarousel-container")); var f = this.options.visible != null ? Math.ceil(this.clipping() / this.options.visible) : null; var g = this.list.children("li"); var h = this; if (g.size() > 0) { var i = 0, e = this.options.offset; g.each(function () { h.format(this, e++); i += h.dimension(this, f) }); this.list.css(this.wh, i + "px"); if (!b || b.size === undefined) this.options.size = g.size() } this.container.css("display", "block"); this.buttonNext.css("display", "block"); this.buttonPrev.css("display", "block"); this.funcNext = function () { h.next() }; this.funcPrev = function () { h.prev() }; this.funcResize = function () { h.reload() }; if (this.options.initCallback != null) this.options.initCallback(this, "init"); if ($.browser.safari) { this.buttons(false, false); $(window).bind("load", function () { h.setup() }) } else this.setup() }; var $jc = $._jcarousel; $jc.fn = $jc.prototype = { jcarousel: "0.2.3" }; $jc.fn.extend = $jc.extend = $.extend; $jc.fn.extend({ setup: function () { this.first = null; this.last = null; this.prevFirst = null; this.prevLast = null; this.animating = false; this.timer = null; this.tail = null; this.inTail = false; if (this.locked) return; this.list.css(this.lt, this.pos(this.options.offset) + "px"); var a = this.pos(this.options.start); this.prevFirst = this.prevLast = null; this.animate(a, false); $(window).unbind("resize", this.funcResize).bind("resize", this.funcResize) }, reset: function () { this.list.empty(); this.list.css(this.lt, "0px"); this.list.css(this.wh, "10px"); if (this.options.initCallback != null) this.options.initCallback(this, "reset"); this.setup() }, reload: function () { if (this.tail != null && this.inTail) this.list.css(this.lt, $jc.intval(this.list.css(this.lt)) + this.tail); this.tail = null; this.inTail = false; if (this.options.reloadCallback != null) this.options.reloadCallback(this); if (this.options.visible != null) { var a = this; var b = Math.ceil(this.clipping() / this.options.visible), c = 0, d = 0; $("li", this.list).each(function (e) { c += a.dimension(this, b); if (e + 1 < a.first) d = c }); this.list.css(this.wh, c + "px"); this.list.css(this.lt, -d + "px") } this.scroll(this.first, false) }, lock: function () { this.locked = true; this.buttons() }, unlock: function () { this.locked = false; this.buttons() }, size: function (a) { if (a != undefined) { this.options.size = a; if (!this.locked) this.buttons() } return this.options.size }, has: function (a, b) { if (b == undefined || !b) b = a; if (this.options.size !== null && b > this.options.size) b = this.options.size; for (var c = a; c <= b; c++) { var d = this.get(c); if (!d.length || d.hasClass("jcarousel-item-placeholder")) return false } return true }, get: function (a) { return $(".jcarousel-item-" + a, this.list) }, add: function (a, b) { var c = this.get(a), d = 0, e = 0; if (c.length == 0) { var f, c = this.create(a), g = $jc.intval(a); while (f = this.get(--g)) { if (g <= 0 || f.length) { g <= 0 ? this.list.prepend(c) : f.after(c); break } } } else d = this.dimension(c); c.removeClass(this.className("jcarousel-item-placeholder")); typeof b == "string" ? c.html(b) : c.empty().append(b); var h = this.options.visible != null ? Math.ceil(this.clipping() / this.options.visible) : null; var i = this.dimension(c, h) - d; if (a > 0 && a < this.first) this.list.css(this.lt, $jc.intval(this.list.css(this.lt)) - i + "px"); this.list.css(this.wh, $jc.intval(this.list.css(this.wh)) + i + "px"); return c }, remove: function (a) { var b = this.get(a); if (!b.length || a >= this.first && a <= this.last) return; var c = this.dimension(b); if (a < this.first) this.list.css(this.lt, $jc.intval(this.list.css(this.lt)) + c + "px"); b.remove(); this.list.css(this.wh, $jc.intval(this.list.css(this.wh)) - c + "px") }, next: function () { this.stopAuto(); if (this.tail != null && !this.inTail) this.scrollTail(false); else this.scroll((this.options.wrap == "both" || this.options.wrap == "last") && this.options.size != null && this.last == this.options.size ? 1 : this.first + this.options.scroll) }, prev: function () { this.stopAuto(); if (this.tail != null && this.inTail) this.scrollTail(true); else this.scroll((this.options.wrap == "both" || this.options.wrap == "first") && this.options.size != null && this.first == 1 ? this.options.size : this.first - this.options.scroll) }, scrollTail: function (a) { if (this.locked || this.animating || !this.tail) return; var b = $jc.intval(this.list.css(this.lt)); !a ? b -= this.tail : b += this.tail; this.inTail = !a; this.prevFirst = this.first; this.prevLast = this.last; this.animate(b) }, scroll: function (a, b) { if (this.locked || this.animating) return; this.animate(this.pos(a), b) }, pos: function (a) { if (this.locked || this.animating) return; a = $jc.intval(a); if (this.options.wrap != "circular") a = a < 1 ? 1 : this.options.size && a > this.options.size ? this.options.size : a; var b = this.first > a; var c = $jc.intval(this.list.css(this.lt)); var d = this.options.wrap != "circular" && this.first <= 1 ? 1 : this.first; var e = b ? this.get(d) : this.get(this.last); var f = b ? d : d - 1; var g = null, h = 0, i = false, j = 0; while (b ? --f >= a : ++f < a) { g = this.get(f); i = !g.length; if (g.length == 0) { g = this.create(f).addClass(this.className("jcarousel-item-placeholder")); e[b ? "before" : "after"](g) } e = g; j = this.dimension(g); if (i) h += j; if (this.first != null && (this.options.wrap == "circular" || f >= 1 && (this.options.size == null || f <= this.options.size))) c = b ? c + j : c - j } var k = this.clipping(); var l = []; var m = 0, f = a, n = 0; var e = this.get(a - 1); while (++m) { g = this.get(f); i = !g.length; if (g.length == 0) { g = this.create(f).addClass(this.className("jcarousel-item-placeholder")); e.length == 0 ? this.list.prepend(g) : e[b ? "before" : "after"](g) } e = g; var j = this.dimension(g); if (j == 0) { return 0 } if (this.options.wrap != "circular" && this.options.size !== null && f > this.options.size) l.push(g); else if (i) h += j; n += j; if (n >= k) break; f++ } for (var o = 0; o < l.length; o++) l[o].remove(); if (h > 0) { this.list.css(this.wh, this.dimension(this.list) + h + "px"); if (b) { c -= h; this.list.css(this.lt, $jc.intval(this.list.css(this.lt)) - h + "px") } } var p = a + m - 1; if (this.options.wrap != "circular" && this.options.size && p > this.options.size) p = this.options.size; if (f > p) { m = 0, f = p, n = 0; while (++m) { var g = this.get(f--); if (!g.length) break; n += this.dimension(g); if (n >= k) break } } var q = p - m + 1; if (this.options.wrap != "circular" && q < 1) q = 1; if (this.inTail && b) { c += this.tail; this.inTail = false } this.tail = null; if (this.options.wrap != "circular" && p == this.options.size && p - m + 1 >= 1) { var r = $jc.margin(this.get(p), !this.options.vertical ? "marginRight" : "marginBottom"); if (n - r > k) this.tail = n - k - r } while (a-- > q) c += this.dimension(this.get(a)); this.prevFirst = this.first; this.prevLast = this.last; this.first = q; this.last = p; return c }, animate: function (a, b) { if (this.locked || this.animating) return; this.animating = true; var c = this; var d = function () { c.animating = false; if (a == 0) c.list.css(c.lt, 0); if (c.options.wrap == "both" || c.options.wrap == "last" || c.options.size == null || c.last < c.options.size) c.startAuto(); c.buttons(); c.notify("onAfterAnimation") }; this.notify("onBeforeAnimation"); if (!this.options.animation || b == false) { this.list.css(this.lt, a + "px"); d() } else { var e = !this.options.vertical ? { left: a } : { top: a }; this.list.animate(e, this.options.animation, this.options.easing, d) } }, startAuto: function (a) { if (a != undefined) this.options.auto = a; if (this.options.auto == 0) return this.stopAuto(); if (this.timer != null) return; var b = this; this.timer = setTimeout(function () { b.next() }, this.options.auto * 1e3) }, stopAuto: function () { if (this.timer == null) return; clearTimeout(this.timer); this.timer = null }, buttons: function (a, b) { if (a == undefined || a == null) { var a = !this.locked && this.options.size !== 0 && (this.options.wrap && this.options.wrap != "first" || this.options.size == null || this.last < this.options.size); if (!this.locked && (!this.options.wrap || this.options.wrap == "first") && this.options.size != null && this.last >= this.options.size) a = this.tail != null && !this.inTail } if (b == undefined || b == null) { var b = !this.locked && this.options.size !== 0 && (this.options.wrap && this.options.wrap != "last" || this.first > 1); if (!this.locked && (!this.options.wrap || this.options.wrap == "last") && this.options.size != null && this.first == 1) b = this.tail != null && this.inTail } var c = this; this.buttonNext[a ? "bind" : "unbind"](this.options.buttonNextEvent, this.funcNext)[a ? "removeClass" : "addClass"](this.className("jcarousel-next-disabled")).attr("disabled", a ? false : true); this.buttonPrev[b ? "bind" : "unbind"](this.options.buttonPrevEvent, this.funcPrev)[b ? "removeClass" : "addClass"](this.className("jcarousel-prev-disabled")).attr("disabled", b ? false : true); if (this.buttonNext.length > 0 && (this.buttonNext[0].jcarouselstate == undefined || this.buttonNext[0].jcarouselstate != a) && this.options.buttonNextCallback != null) { this.buttonNext.each(function () { c.options.buttonNextCallback(c, this, a) }); this.buttonNext[0].jcarouselstate = a } if (this.buttonPrev.length > 0 && (this.buttonPrev[0].jcarouselstate == undefined || this.buttonPrev[0].jcarouselstate != b) && this.options.buttonPrevCallback != null) { this.buttonPrev.each(function () { c.options.buttonPrevCallback(c, this, b) }); this.buttonPrev[0].jcarouselstate = b } }, notify: function (a) { var b = this.prevFirst == null ? "init" : this.prevFirst < this.first ? "next" : "prev"; this.callback("itemLoadCallback", a, b); if (this.prevFirst !== this.first) { this.callback("itemFirstInCallback", a, b, this.first); this.callback("itemFirstOutCallback", a, b, this.prevFirst) } if (this.prevLast !== this.last) { this.callback("itemLastInCallback", a, b, this.last); this.callback("itemLastOutCallback", a, b, this.prevLast) } this.callback("itemVisibleInCallback", a, b, this.first, this.last, this.prevFirst, this.prevLast); this.callback("itemVisibleOutCallback", a, b, this.prevFirst, this.prevLast, this.first, this.last) }, callback: function (a, b, c, d, e, f, g) { if (this.options[a] == undefined || typeof this.options[a] != "object" && b != "onAfterAnimation") return; var h = typeof this.options[a] == "object" ? this.options[a][b] : this.options[a]; if (!$.isFunction(h)) return; var i = this; if (d === undefined) h(i, c, b); else if (e === undefined) this.get(d).each(function () { h(i, this, d, c, b) }); else { for (var j = d; j <= e; j++) if (j !== null && !(j >= f && j <= g)) this.get(j).each(function () { h(i, this, j, c, b) }) } }, create: function (a) { return this.format("<li></li>", a) }, format: function (a, b) { var c = $(a).addClass(this.className("jcarousel-item")).addClass(this.className("jcarousel-item-" + b)); c.attr("jcarouselindex", b); return c }, className: function (a) { return a + " " + a + (!this.options.vertical ? "-horizontal" : "-vertical") }, dimension: function (a, b) { var c = a.jquery != undefined ? a[0] : a; var d = !this.options.vertical ? c.offsetWidth + $jc.margin(c, "marginLeft") + $jc.margin(c, "marginRight") : c.offsetHeight + $jc.margin(c, "marginTop") + $jc.margin(c, "marginBottom"); if (b == undefined || d == b) return d; var e = !this.options.vertical ? b - $jc.margin(c, "marginLeft") - $jc.margin(c, "marginRight") : b - $jc.margin(c, "marginTop") - $jc.margin(c, "marginBottom"); $(c).css(this.wh, e + "px"); return this.dimension(c) }, clipping: function () { return !this.options.vertical ? this.clip[0].offsetWidth - $jc.intval(this.clip.css("borderLeftWidth")) - $jc.intval(this.clip.css("borderRightWidth")) : this.clip[0].offsetHeight - $jc.intval(this.clip.css("borderTopWidth")) - $jc.intval(this.clip.css("borderBottomWidth")) }, index: function (a, b) { if (b == undefined) b = this.options.size; return Math.round(((a - 1) / b - Math.floor((a - 1) / b)) * b) + 1 } }); $jc.extend({ defaults: function (a) { return $.extend(defaults, a || {}) }, margin: function (a, b) { if (!a) return 0; var c = a.jquery != undefined ? a[0] : a; if (b == "marginRight" && $.browser.safari) { var d = { display: "block", "float": "none", width: "auto" }, e, f; $.swap(c, d, function () { e = c.offsetWidth }); d["marginRight"] = 0; $.swap(c, d, function () { f = c.offsetWidth }); return f - e } return $jc.intval($.css(c, b)) }, intval: function (a) { a = parseInt(a); return isNaN(a) ? 0 : a } })