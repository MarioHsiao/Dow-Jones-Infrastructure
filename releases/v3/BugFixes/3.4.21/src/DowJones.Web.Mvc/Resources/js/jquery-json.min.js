/*
 * jQuery JSON Plugin
 * version: 1.0 (2008-04-17)
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 *
 * Brantley Harris technically wrote this plugin, but it is based somewhat
 * on the JSON.org website's http://www.json.org/json2.js, which proclaims:
 * "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
 * I uphold.  I really just cleaned it up.
 *
 * It is also based heavily on MochiKit's serializeJSON, which is 
 * copywrited 2005 by Bob Ippolito.
 */
(function ($) { function toIntegersAtLease(a) { return a < 10 ? "0" + a : a } Date.prototype.toJSON = function (a) { return this.getUTCFullYear() + "-" + toIntegersAtLease(this.getUTCMonth()) + "-" + toIntegersAtLease(this.getUTCDate()) }; var escapeable = /["\\\x00-\x1f\x7f-\x9f]/g; var meta = { "\b": "\\b", "	": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }; $.quoteString = function (a) { if (escapeable.test(a)) { return '"' + a.replace(escapeable, function (a) { var b = meta[a]; if (typeof b === "string") { return b } b = a.charCodeAt(); return "\\u00" + Math.floor(b / 16).toString(16) + (b % 16).toString(16) }) + '"' } return '"' + a + '"' }; $.toJSON = function (a, b) { var c = typeof a; if (c == "undefined") return "undefined"; else if (c == "number" || c == "boolean") return a + ""; else if (a === null) return "null"; if (c == "string") { return $.quoteString(a) } if (c == "object" && typeof a.toJSON == "function") return a.toJSON(b); if (c != "function" && typeof a.length == "number") { var d = []; for (var e = 0; e < a.length; e++) { d.push($.toJSON(a[e], b)) } if (b) return "[" + d.join(",") + "]"; else return "[" + d.join(", ") + "]" } if (c == "function") { throw new TypeError("Unable to convert object of type 'function' to json.") } var d = []; for (var f in a) { var g; c = typeof f; if (c == "number") g = '"' + f + '"'; else if (c == "string") g = $.quoteString(f); else continue; var h = $.toJSON(a[f], b); if (typeof h != "string") { continue } if (b) d.push(g + ":" + h); else d.push(g + ": " + h) } return "{" + d.join(", ") + "}" }; $.compactJSON = function (a) { return $.toJSON(a, true) }; $.evalJSON = function (src) { return eval("(" + src + ")") }; $.secureEvalJSON = function (src) { var filtered = src; filtered = filtered.replace(/\\["\\\/bfnrtu]/g, "@"); filtered = filtered.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]"); filtered = filtered.replace(/(?:^|:|,)(?:\s*\[)+/g, ""); if (/^[\],:{}\s]*$/.test(filtered)) return eval("(" + src + ")"); else throw new SyntaxError("Error parsing JSON, source is not valid.") } })(DJ.jQuery)