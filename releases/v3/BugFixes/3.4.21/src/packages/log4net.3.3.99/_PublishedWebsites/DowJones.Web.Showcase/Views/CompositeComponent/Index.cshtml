@model CompositeComponentDemoViewModel
@{ 
    ViewBag.Title = "Composite Component"; 
    Html.DJ().ScriptRegistry().OnDocumentReady("wireUpEvents();");
}

<style>
    #HeadlineSources { width: 100px; float: left; }
    #CompanyHeadlines { width: 500px; float: left; }
    .filters { height: 40px; font-weight: bold; }
    .filters, .dj_headlineListContainer { clear: both; }
    .filters li {
        cursor: pointer;
        list-style: none;
        float: left;
        display: block;
        min-width: 100px;
        color: #999;
    }
    .filters .selected { color: #000; }
    .filtered { display: none; }
</style>

<script type="text/javascript">
    function wireUpEvents() {
        
        var companyHeadlines = $('#CompanyHeadlines').findComponent(DJ.UI.CompanyHeadlines);

        // Subscribe to all Filter component events on the page
        // and re-publish them to the global PubSubManager under
        // the global event name 'FiltersChanged'
        var filterUpdatedHandler = function (args) { $dj.publish('FiltersChanged', args); };
        
        companyHeadlines.subscribe('companyFilterChanged.dj.CompanyHeadlines', filterUpdatedHandler);
        
        $('#HeadlineSources')
            .findComponent(DJ.UI.SourcesFilter)
            .subscribe('sourcesFilterChanged.dj.SourcesFilter', filterUpdatedHandler);


        // Subscribe to the global PubSubManager event and update the 
        // Company Headlines filter when any of the filters change
        $dj.subscribe('FiltersChanged', function (args) {
            $dj.debug('Handling Filter Update');

            // Merge the current filter settings with the existing filter
            var filter = $.extend(companyHeadlines.getFilter(), args);
            companyHeadlines.setFilter(filter);
        });

    }
</script>

@Html.DJ().Render(Model.Sources, new { id = "HeadlineSources" })
@Html.DJ().Render(Model.Headlines, new { id = "CompanyHeadlines" })