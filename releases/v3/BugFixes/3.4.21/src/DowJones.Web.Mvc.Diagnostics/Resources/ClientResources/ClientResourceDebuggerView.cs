//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DowJones.Web.Mvc.Diagnostics.Resources.ClientResources
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.Mvc.Html;
    using DowJones.Web.Mvc.Extensions;
    
    // Last Generated Timestamp: 07/27/2012 04:07 PM
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorViewComponentClassGenerator", "1.0.0.27108")]
    public class ClientResourceDebuggerView : DowJones.Web.Mvc.UI.ViewComponentBase<DowJones.Web.Mvc.Diagnostics.ClientResources.ClientResourcesInfo>
    {
#line hidden

        public ClientResourceDebuggerView()
        {
        }
        public override string ClientPluginName
        {
            get
            {
                return null;
            }
        }
        public override void ExecuteTemplate()
        {




   var Title = "Client Resource Debugger"; 

WriteLiteral("<html>\r\n<head>\r\n    <title>");


      Write(Title);

WriteLiteral(@"</title>
    <style>
        label {
            clear: none;
            display: block;
            float: left;
            width: 130px;
            font-weight: bold;
        }
        caption {
            font-size: 130%;
            font-weight: bold;
            text-decoration: underline;
        }
        table { border-collapse: collapse; }
        th { text-align: left; }
        tbody {
            border-top: 1px groove;
            height: 500px;
            overflow: auto;
            vertical-align: top;
        }
        .hilight { background-color: Yellow; }
        tr:hover { background-color: #CCC !important; }
        tbody tr.selected {
            color: #FFF;
            background-color: #666; 
        }

        #InvalidClientResources tr { background-color: lightcoral; }
    </style>
    <script type=""text/javascript"" src=""http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.2.min.js""></script>
    <script type=""text/javascript"">
        $(function () {
            $('#ClientResourceAliases tr')
                .click(function () {
                    $('#ClientResourceAliases tr').removeClass('selected');
                    $(this).addClass('selected');
                });
        });
    </script>
</head>
<body>
    <h1>");


   Write(Title);

WriteLiteral("</h1>\r\n\r\n    <div id=\"dealias-form\" >\r\n        <form method=\'POST\'>\r\n            " +
"<label>Alias:</label>\r\n            ");


       Write(Html.TextBox("alias", Model.Alias, new { style = "width: 500px" }));

WriteLiteral("\r\n            <input value=\'Get Resource Name\' type=\'submit\' />\r\n\r\n");


             if (Model.HasResourceName) {

WriteLiteral("                <div>\r\n                    <label>Resource Name: </label>\r\n      " +
"              <span>");


                     Write(Model.ResourceName);

WriteLiteral("</span>\r\n                </div>\r\n");


            }

WriteLiteral("        </form>\r\n    </div>\r\n\r\n    <div id=\"alias-form\" >\r\n        <form method=\'" +
"POST\'>\r\n            <label>Resource Name:</label>\r\n            ");


       Write(Html.TextBox("ResourceName", Model.ResourceName, new { style = "width: 500px" }));

WriteLiteral("\r\n            <input value=\'Get Alias\' type=\'submit\' />\r\n\r\n");


             if (Model.HasAlias) {

WriteLiteral("                <div>\r\n                    <label>Alias: </label>\r\n              " +
"      <span>");


                     Write(Model.Alias);

WriteLiteral("</span>\r\n                </div>\r\n");


            }

WriteLiteral("        </form>\r\n    </div>\r\n\r\n\r\n    <div id=\"search-form\" >\r\n        <form metho" +
"d=\'POST\'>\r\n            <label>Search:</label>\r\n            ");


       Write(Html.TextBox("query", Model.SearchQuery, new { style = "width: 200px" }));

WriteLiteral("\r\n            <input value=\'Search\' type=\'submit\' />\r\n            <input value=\'R" +
"eset\' type=\"reset\" onclick=\"window.location.href=window.location.href;\" />\r\n    " +
"    </form>\r\n    </div>\r\n    \r\n\r\n");


 if (Model.HasInvalidClientResources)
{

WriteLiteral("    <table id=\"InvalidClientResources\">\r\n        <caption>Invalid Client Resource" +
"s</caption>\r\n        \r\n");


     foreach (var resource in Model.InvalidClientResources)
    {

WriteLiteral("        <tr>\r\n            <td>");


           Write(resource);

WriteLiteral("</td>\r\n        </tr>            \r\n");


    }

WriteLiteral("\r\n    </table>\r\n");


}

WriteLiteral("\r\n\r\n");


 if (Model.Aliases.Any()) {


WriteLiteral(@"    <table id=""ClientResourceAliases"">
        <caption>Client Resource Aliases</caption>

        <colgroup>
            <col width=""200px"" />
            <col />
        </colgroup>

        <thead>
            <tr>
                <th>Alias</th>
                <th>Resource Name</th>
            </tr>
        </thead>

        <tbody>

");


         foreach (var alias in Model.Aliases)
        {

WriteLiteral("            <tr class=\"");


                   Write((alias.IsSearchMatch == true) ? "hilight" : string.Empty);

WriteLiteral("\">\r\n                <td>");


               Write(alias.Alias);

WriteLiteral("</td>\r\n                <td>");


               Write(alias.Name);

WriteLiteral("</td>\r\n            </tr>            \r\n");


        }

WriteLiteral("\r\n        </tbody>\r\n\r\n    </table>\r\n");


}

WriteLiteral("\r\n</body>\r\n</html>");


        }
    }
}
