//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.CompositeHeadline.CompositeHeadline.js", "text/javascript")]

namespace DowJones.Web.Mvc.UI.Components.CompositeHeadline
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Security;
    using System.Web.UI;
    using DowJones.Web.Mvc.Extensions;
    using DowJones.Web.Mvc.UI.Components.HeadlineList;
    
    // Last Generated Timestamp: 06/29/2012 11:06 AM
    [DowJones.Web.ScriptResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.CompositeHeadline.CompositeHeadline.js", ResourceKind=DowJones.Web.ClientResourceKind.Script, DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.CompositeHeadline.CompositeHeadlineComponent))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorViewComponentClassGenerator", "1.0.0.22175")]
    public class CompositeHeadlineComponent : DowJones.Web.Mvc.UI.CompositeComponent<CompositeHeadlineModel>
    {
#line hidden

        public CompositeHeadlineComponent()
        {
        }
        public override string ClientPluginName
        {
            get
            {
                return "dj_CompositeHeadline";
            }
        }
        public override void ExecuteTemplate()
        {


WriteLiteral("\r\n");





   CssClass = "dj_CompositeHeadline"; 

WriteLiteral("<div class=\"dj_HeadlineOptions ui-component\">\r\n    <div class=\"dj_paging\">\r\n     " +
"   <span class=\"dj_comm-icon pagination-arrow prevs ");


                                                     Write(Model.CanPagePrevious ? "dj_prev" : "disabled");

WriteLiteral("\" title=\"");


                                                                                                              Write(DJ.Token("previousItem"));

WriteLiteral("\">\r\n        </span><strong>");


                  Write(Format(Model.FirstResultIndex + 1));

WriteLiteral("\r\n            - ");


         Write(Format(Model.LastResultIndex));

WriteLiteral("</strong> ");


                                                 Write(DJ.Token("of"));

WriteLiteral("\r\n        ");


   Write(Format(Model.TotalResultCount));

WriteLiteral("\r\n        <span class=\"dj_comm-icon pagination-arrow next ");


                                                    Write(Model.CanPageNext ? "dj_next" : "disabled");

WriteLiteral("\" title=\"");


                                                                                                         Write(DJ.Token("nextItem"));

WriteLiteral("\"></span>\r\n\r\n");


         if (Model.TotalDuplicateCount > 0){

WriteLiteral("            <span class=\"duplicate-label\">");


                                     Write(DJ.Token("dupsSoFar"));

WriteLiteral(": </span>");



WriteLiteral("<span class=\"duplicate-count\">");


                                                                                                  Write(Model.TotalDuplicateCount);

WriteLiteral("</span>\r\n");


        }
        else if (Model.DuplicateCount > 0)
        {

WriteLiteral("            <span class=\"duplicate-label\">");


                                     Write(DJ.Token("totalDupOnPageRefresh"));

WriteLiteral(": </span>");



WriteLiteral("<span class=\"duplicate-count\">");


                                                                                                              Write(Model.DuplicateCount);

WriteLiteral("</span>\r\n");


        }

WriteLiteral("       \r\n    </div>\r\n");


     if (Model.ShowHeadlineViewOptions)
    {

WriteLiteral("        <div class=\"controls\">\r\n            <div class=\"drop-down-button sort\">\r\n" +
"                <div class=\"selected-option\">\r\n                    <span class=\"" +
"\">");


                              Write(DJ.Token("options"));

WriteLiteral("</span> <span class=\"dj_icon dj_icon-d-arrow-g\">\r\n                    </span>\r\n  " +
"                  <div class=\"options sort-options dj_options\">\r\n               " +
"         <label class=\"select-prompt\">");


                                                Write(DJ.Token("sortOptions"));

WriteLiteral(":</label>\r\n                        ");


                   Write(Html.RadioButtonList("order", Model.HeadlineSortOptions, HtmlHelpers.ListType.Ordered, "select-options"));

WriteLiteral("\r\n                        \r\n");


                         if (Model.EnableDuplicateOption)
                        {

WriteLiteral("                        <!-- dj_search-builder_filters-category_toolbar -->\r\n");



WriteLiteral("                        <div class=\"dj_search-builder_filters-category_toolbar\">\r" +
"\n                            <div class=\"select-duplicates\">\r\n                  " +
"              <label class=\"select-prompt inline\" for=\"option_show_duplicates\">");


                                                                                            Write(DJ.Token("showDuplicates"));

WriteLiteral(":</label>\r\n                                <!-- .dj_toggle-switch -->\r\n          " +
"                      <div class=\"dj_toggle-switch clearfix\">\r\n                 " +
"                   <span class=\"switch ");


                                                    Write(Model.ShowDuplicates == ShowDuplicates.Off ? "on" : "");

WriteLiteral("\" data-state=\"");


                                                                                                                          Write(Model.ShowDuplicates.ToString().ToLower());

WriteLiteral("\">");


                                                                                                                                                                      Write(DJ.Token(Model.ShowDuplicates.ToString().ToLower()));

WriteLiteral("</span>\r\n                                    <div class=\"text-behind\">\r\n         " +
"                               <span class=\"tb-left\">");


                                                         Write(DJ.Token("on"));

WriteLiteral("</span> <span class=\"tb-right\">");


                                                                                                       Write(DJ.Token("off"));

WriteLiteral("</span>\r\n                                    </div>\r\n                            " +
"    </div>\r\n                                <!-- end: .dj_toggle-switch -->\r\n   " +
"                         </div>\r\n                        </div>\r\n");


                        }

WriteLiteral("                        <input class=\"button dj_optionsOk\" type=\"button\" value=\"");


                                                                           Write(DJ.Token("ok"));

WriteLiteral("\">\r\n                    </div>\r\n                </div>\r\n                <!-- end:" +
" .selected-option -->\r\n            </div>\r\n            <!-- end: .drop-down-butt" +
"on -->\r\n        </div>\r\n");



WriteLiteral("        <!-- end: .controls -->\r\n");


    }

WriteLiteral("</div>\r\n");


 if (Model.ShowPostProcessing)
{
    
Write(DJ.Render(Model.PostProcessing));

                                    
}


Write(DJ.Render(Model.HeadlineList));

WriteLiteral("\r\n");


        }
    }
}
