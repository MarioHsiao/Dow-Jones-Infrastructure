(function (e, t) { e.widget("ui.popupBalloon", { options: { popupClass: "", width: 400, height: 130, positionX: null, positionY: null, title: "", content: "", jScrollPaneEnabled: true, insetMargin: 0, animationDistance: 50, positioningMode: "normal", alignTo: e("body"), popupPosition: "right", popupAlign: "center", xAlign: "right", xOffset: 0, xOffsetInverted: "auto", yAlign: "center", yOffset: 0, yOffsetInverted: "auto", arrowEnabled: true, animateDisplayEnabled: true, animateMoveEnabled: true, animateHideEnabled: true, animationSpeed: 300, interactionMode: "none", mouseNearPadding: 10 }, _create: function () { var t = this, n = t.element, r = t.options; if (!e.iDevices) { t.iDevices = { iPad: navigator.userAgent.indexOf("iPad") != -1} } else { t.iDevices = e.iDevices } t.preferences = { popupPosition: r.popupPosition, popupAlign: r.popupAlign }; if (r.xOffsetInverted == "auto") { r.xOffsetInverted = 0; if (!e(t.element).is("shape")) { var i = e(t.element).width(); if (r.popupPosition == "right" && r.xAlign == "right") { r.xOffsetInverted = i * -1 } if (r.popupPosition == "left" && r.xAlign == "left") { r.xOffsetInverted = i } } } if (r.yOffsetInverted == "auto") { r.yOffsetInverted = 0; if (!e(t.element).is("shape")) { var s = e(t.element).height(); if (r.popupPosition == "top" && r.yAlign == "top") { r.yOffsetInverted = s / 2 } if (r.popupPosition == "bottom" && r.yAlign == "bottom") { r.yOffsetInverted = s / 2 * -1 } } } e(document).unbind("mousemove.popup-balloon").bind("mousemove.popup-balloon", function (e) { t.mouseX = e.pageX; t.mouseY = e.pageY; t.nearCallout = false; if (t.isVisible()) { var n = r.mouseNearPadding; if (t.mouseX >= t.currentX - n && t.mouseX <= t.currentX + t.currentWidth + n && t.mouseY >= t.currentY - n && t.mouseY <= t.currentY + t.currentHeight + n) { t.nearCallout = true } } if (t.nearCallout) { t._trigger("popupMouseNear", e, t.popbox) } }); window.setTimeout(function () { e("body").unbind("mousedown.popup-balloon").bind("mousedown.popup-balloon", function (n) { if (!e(n.target).data("popbox")) { t._removeOldPopups() } n.stopPropagation() }) }, 20) }, _init: function () { var t = this, n = t.element, r = t.options; t.visible = false; if (!r.animateDisplayEnabled) { r.animationDistance = 0 } r.popupPosition = t.preferences.popupPosition; popupAlign = t.preferences.popupAlign; switch (r.interactionMode) { case "custom": case "none": if (e(".popup-balloon").length) { if (e(n).data("timestamp") == e(".popup-balloon").data("timestamp")) { t.hide() } else { t.show() } } else { t.show() } break; case "click": e(n).bind("click", function (e) { if (!t.visible) { t._hide(true); t.show() } }); break; case "hover": e(n).bind("mouseenter", function () { clearTimeout(e.data(this, "bubbleTimeout")); var n = e(this).data("ibubbleIsOpened"); if (!n) { e(this).data("ibubbleIsOpened", true); t.show() } }); e(n).bind("mouseleave", function () { e(this).data("bubbleTimeout", window.setTimeout(function () { var t = e(n).data("ibubbleIsOpened"); if (t) { e(n).removeData("ibubbleIsOpened"); e(n).popupBalloon("hide"); clearTimeout(e(n).data("bubbleTimeout")) } }, 300)) }); break } }, _setOption: function (e, t) { var n = this, r = n.element, i = n.options; if (n.popbox) { switch (e) { case "popupClass": n.popbox.removeClass().addClass("popup-balloon").addClass(t); if (i.title) { n.popbox.addClass("with-title") } if (i.arrowEnabled) { n.popbox.addClass("with-arrow") } i[e] = t; break; case "title": n.popbox.find(".title").text(t); i[e] = t; break; case "content": n.popbox.find(".content").empty().html(t); n._setCalloutHeight("auto"); if (i.jScrollPaneEnabled) { n.popbox.find(".content").jScrollPane({ showArrows: true, autoReinitialise: false, verticalDragMaxHeight: 52, verticalGutter: 10, horizontalGutter: 20 }) } i[e] = t; break; case "width": n.popbox.find(".popup-body, .header .title").outerWidth(t); n.currentWidth = t; i[e] = t; break; case "height": n._setCalloutHeight(t); i[e] = t; break; case "popupPosition": case "popupAlign": n.preferences[e] = i[e] = t; break; default: i[e] = t; break } } }, show: function () { var t = this, n = t.element, r = t.options; if (t.visible) { return } var i = (new Date).getTime(); if (n.data("popbox")) { t._hide() } if (r.interactionMode == "hover") { t._hide(true) } var s = e('<div class="popup-balloon"><div class="balloon-arrow"></div><div class="popup-body"><div class="content"></div></div></div>'); t.popbox = s; s.data("controller", n); s.data("timestamp", i); n.data("timestamp", i); if (r.popupClass) { s.addClass(r.popupClass) } if (r.title) { s.addClass("with-title"); s.prepend('<div class="header"><div class="title ellipsis">' + r.title + "</div></div>") } if (r.content) { s.find(".content").empty().html(r.content) } if (r.arrowEnabled) { s.addClass("with-arrow") } t._removeOldPopups(); e("body").append(s); s.find(".popup-body, .header .title").outerWidth(r.width); t.currentWidth = r.width; t._setCalloutHeight(r.height); r.popupPosition = t.preferences.popupPosition; r.popupAlign = t.preferences.popupAlign; s.attr({ position: r.popupPosition, popupalign: r.popupAlign }); var o = t._getCoordinates(s), u = o.x, a = o.y; s.bind("mousemove", function (e) { e.stopPropagation(); t._trigger("popupMouseMove", e, s) }).bind("mousedown", function (e) { e.stopPropagation(); t._trigger("popupMouseDown", e, s) }).bind("mouseenter", function (e) { t._trigger("popupMouseEnter", e, s) }).bind("mouseleave", function (e) { t._trigger("popupMouseLeave", e, s) }); if (r.interactionMode == "hover") { s.bind("mouseenter", function () { clearTimeout(e(n).data("bubbleTimeout")) }); s.bind("mouseleave", function () { e(n).data("bubbleTimeout", window.setTimeout(function () { var t = e(n).data("ibubbleIsOpened"); if (t) { e(n).removeData("ibubbleIsOpened"); e(n).popupBalloon("hide"); clearTimeout(e(n).data("bubbleTimeout")) } }, 300)) }) } if (r.jScrollPaneEnabled) { s.find(".content").jScrollPane({ showArrows: true, autoReinitialise: true, verticalDragMaxHeight: 52, verticalGutter: 10, horizontalGutter: 20 }) } if (typeof $dj == "undefined") { window.$dj = { maxZIndex: 99999} } s.css("z-index", ++$dj.maxZIndex); n.data("popbox", s); this.visible = true; t.positionElement(s, u, a, function () { t._trigger("onShow") }) }, _hide: function (t) { var n = this, r = n.element, i = n.options; var s = r.data("popbox"); if (t) { s = e(".popup-balloon") } if (s && s.length) { if (i.animateHideEnabled && !t) { s.fadeOut(i.animationSpeed, function () { e(this).remove() }) } else { s.each(function () { e(this).data("controller").popupBalloon("hide") }) } } }, hide: function () { var e = this; e._hide(); e.visible = false; e._trigger("onHide") }, _setCalloutHeight: function (e) { var t = this, n = t.element, r = t.options; if (e == "auto") { t.popbox.find(".content").outerHeight(t.popbox.find(".content").height("").outerHeight()) } else { var i = t.popbox.find(".header .title").outerHeight(), s = e - i; t.popbox.find(".content").outerHeight(s) } t.currentHeight = t.popbox.height() }, positionElement: function (t, n, r, i) { var s = this, o = s.element, u = s.options, a = u.popupPosition == "right" ? u.animationDistance : u.popupPosition == "left" ? u.animationDistance * -1 : 0, f = u.popupPosition == "bottom" ? u.animationDistance : u.popupPosition == "top" ? u.animationDistance * -1 : 0; if (u.animateDisplayEnabled) { e(t).css({ top: r + f + "px", left: n + a + "px", display: "block" }); e(t).stop().animate({ left: "-=" + a, top: "-=" + f }, u.animationSpeed, function () { e(this).css({ opacity: "", zoom: "", filter: "" }); s.scrollDocument(i) }) } else { e(t).stop().css({ top: r + "px", left: n + "px", display: "block", opacity: "", zoom: "", filter: "" }); s.scrollDocument(i) } s.currentX = n; s.currentY = r }, updatePosition: function (t, n) { var r = this, i = r.element, s = r.options, o = i.data("popbox"); s.positionX = t; s.positionY = n; s.popupPosition = r.preferences.popupPosition; s.popupAlign = r.preferences.popupAlign; var u = r._getCoordinates(o), a = u.x, f = u.y; o.attr({ position: s.popupPosition, popupalign: s.popupAlign }); if (s.animateMoveEnabled) { o.stop().animate({ top: f, left: a }, s.animationSpeed, function () { e(this).css({ opacity: "", zoom: "", filter: "" }); r.scrollDocument() }) } else { o.css({ top: f, left: a, opacity: "", zoom: "", filter: "" }); r.scrollDocument() } r.currentX = a; r.currentY = f }, rePosition: function (t) { var n = this, r = n.options, i = this.popbox, s = e("div.content", i), o = e(".balloon-arrow", i), u = i.offset(), a = o.position(), f = s.height(), l = 0, c = 0; if (o.offset().left + o.width() < e(n.element).offset().left) { var h = n._getCoordinates(i); var p = e(n.element).outerWidth(true); if (e(n.element).is("shape")) { p = parseInt(p / 3) } e(i).animate({ left: h.x - p + "px" }, 200, t) } else { if (e.isFunction(t)) { t() } } if (s.children().size() > 0) { s.children().each(function () { l = l + e(this).outerHeight() }); if (l > f) { c = l - f; if (r.popupAlign != "top" && r.popupAlign != "bottom" && r.popupAlign != "under-title") { i.animate({ top: u.top - c / 2 + "px" }, { duration: 200, queue: false }); o.animate({ top: a.top + c / 2 + "px" }, { duration: 200, queue: false }) } else if (r.popupAlign == "bottom") { i.animate({ top: u.top - c + "px" }, { duration: 200, queue: false }) } s.animate({ height: l }, { duration: 200, queue: false, complete: function () { e(this).css({ height: "", overflow: "visible" }); n.scrollDocument(t) } }) } else { if (e.isFunction(t)) { t() } } s.children().show() } }, scrollDocument: function (t) { var n = this.popbox; if (!n.is(":visible")) { return } var r = this, i = n.offset(), s = n.outerHeight(), o = e(window).height(), u = r.iDevices.iPad ? window.pageYOffset : e(document).scrollTop(), a = 0; if (o + u - i.top < s) { a = s - (o - i.top) + 1 } else if (u > 0 && u - i.top > 0) { a = i.top - 1 } if (a) { e("body").stop().animate({ scrollTop: a }, 500, t || e.noop()) } else { if (e.isFunction(t)) { t() } } }, getpopbox: function () { return this.popbox }, isVisible: function () { return this.visible }, _getCoordinates: function (t) { var n = this, r = n.element, i = n.options, s = e(t).outerHeight(), o = e(t).outerWidth(), u = e(t).find(".balloon-arrow"), a = i.arrowEnabled ? u.outerWidth() : 0, f = i.arrowEnabled ? u.outerHeight() : 0; var l = e(r); if (i.positioningMode == "alignTo") { l = i.alignTo } if (i.positionX || i.positionX === 0 || i.positionY || i.positionY === 0) { var c = i.positionX, h = i.positionY } else if (i.positioningMode == "cursor") { var c = n.mouseX, h = n.mouseY } else { switch (i.xAlign) { case "left": var c = l.offset().left; break; case "right": var c = l.offset().left + l.outerWidth(); break; case "center": default: var c = l.offset().left + l.outerWidth() / 2; break } switch (i.yAlign) { case "top": var h = l.offset().top; break; case "bottom": var h = l.offset().top + l.outerHeight(); break; case "center": default: var h = l.offset().top + l.outerHeight() / 2; break } } c += i.xOffset; h += i.yOffset; switch (i.popupPosition) { case "top": if (h - f - s - i.animationDistance + i.insetMargin < 0) { h = h + f - i.insetMargin - i.yOffset + i.yOffset * -1 + i.yOffsetInverted; i.popupPosition = "bottom"; e(t).attr("position", "bottom") } else { h = h - f - s + i.insetMargin; e(t).attr("position", "top") } break; case "left": if (c - a - o - i.animationDistance + i.insetMargin < 0) { c = c + a - i.insetMargin - i.xOffset + i.xOffset * -1 + i.xOffsetInverted; i.popupPosition = "right"; e(t).attr("position", "right") } else { c = c - a - o + i.insetMargin; e(t).attr("position", "left") } break; case "bottom": if (h + f + s + i.animationDistance - i.insetMargin > e(document).height()) { h = h - f - s + i.insetMargin - i.yOffset + i.yOffset * -1 + i.yOffsetInverted; i.popupPosition = "top"; e(t).attr("position", "top") } else { h = h + f - i.insetMargin; e(t).attr("position", "bottom") } break; case "right": default: if (c + a + o + i.animationDistance - i.insetMargin > e(window).width()) { c = c - a - o + i.insetMargin - i.xOffset + i.xOffset * -1 + i.xOffsetInverted; if (c < 0) { c = 0 } i.popupPosition = "left"; e(t).attr("position", "left") } else { c = c + a - i.insetMargin; e(t).attr("position", "right") } break } var p = false, d = 0; if (i.arrowEnabled) { u.css({ top: "", right: "", bottom: "", left: "" }); while (!p && d < 3) { d++; switch (i.popupAlign) { case "top": var v = h - f / 2; if (v + s <= e(document).height()) { p = true; h = v; e(t).attr("popupalign", "top"); u.css("top", "") } else { i.popupAlign = "center" } break; case "under-title": var v = h - f / 2 - 63; if (v + s <= e(document).height()) { p = true; h = v; u.css("margin-top", "25px") } else { i.popupAlign = "center" } break; case "right": var m = c - (o - a / 2); if (m > 0) { p = true; c = m; e(t).attr("popupalign", "right"); u.css("right", "") } else { i.popupAlign = "left" } break; case "bottom": var v = h - (s - f / 2); if (v > 0) { p = true; h = v; e(t).attr("popupalign", "bottom"); u.css("bottom", "") } else { i.popupAlign = "top" } break; case "left": var m = c - a / 2; if (m + o <= e(window).width()) { p = true; c = m; e(t).attr("popupalign", "left"); u.css("left", "") } else { i.popupAlign = "center" } break; case "center": default: if (i.popupPosition == "left" || i.popupPosition == "right") { var v = h - s / 2; if (v + s <= e(document).height() && v > 0) { p = true; h = v; u.css("top", s / 2 - f / 2 + "px"); e(t).attr("popupalign", "center") } else { i.popupAlign = "bottom" } } else if (i.popupPosition == "top" || i.popupPosition == "bottom") { var m = c - o / 2; if (m + o <= e(window).width() && m > 0) { p = true; c -= o / 2; u.css("left", o / 2 - a / 2 + "px"); e(t).attr("popupalign", "center") } else { i.popupAlign = "right" } } break } } } else { while (!p && d < 3) { d++; switch (i.popupAlign) { case "top": if (h + s <= e(document).height()) { p = true; e(t).attr("popupalign", "top") } else { i.popupAlign = "center" } break; case "right": var m = c - o; if (m > 0) { p = true; c = m; e(t).attr("popupalign", "right") } else { i.popupAlign = "left" } break; case "bottom": var v = h - s; if (v > 0) { p = true; h = v; e(t).attr("popupalign", "bottom") } else { i.popupAlign = "top" } break; case "left": if (c + o <= e(window).width()) { p = true; e(t).attr("popupalign", "left") } else { i.popupAlign = "center" } break; case "center": default: if (i.popupPosition == "left" || i.popupPosition == "right") { var v = h - s / 2; if (v + s <= e(document).height() && v > 0) { p = true; h = v; e(t).attr("popupalign", "center") } else { i.popupAlign = "bottom" } } else if (i.popupPosition == "top" || i.popupPosition == "bottom") { var m = c - o / 2; if (m + o <= e(window).width() && m > 0) { p = true; c -= o / 2; e(t).attr("popupalign", "center") } else { i.popupAlign = "right" } } break } } } return { x: c, y: h} }, _removeOldPopups: function () { var t = this; e(".popup-balloon").each(function () { var n = e(this).data("controller"); if (n.length) { n.removeData("popbox") } e(this).remove(); t.visible = false }) } }) })(jQuery)