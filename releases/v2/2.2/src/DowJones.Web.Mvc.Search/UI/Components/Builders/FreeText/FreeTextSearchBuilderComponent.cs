//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.Search.UI.Components.Builders.FreeText.FreeTextSearchBuilder.js", "text/javascript")]

namespace DowJones.Web.Mvc.Search.UI.Components.Builders.FreeText
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Security;
    using System.Web.UI;
    using DowJones.Search;
    using DowJones.Attributes;
    using DowJones.Globalization;
    using DowJones.Extensions;
    using DowJones.Web.Mvc.UI.Components.CalloutPopup;
    using System.Web.Mvc;
    using System.Web.Mvc.Html;
    using DowJones.Infrastructure;
    using DowJones.Web.Mvc.Extensions;
    
    // Last Generated Timestamp: 04/20/2012 10:39 AM
    [DowJones.Web.ScriptResourceAttribute(null, ResourceName="DowJones.Web.Mvc.Search.UI.Components.Builders.FreeText.FreeTextSearchBuilder.js", ResourceKind=DowJones.Web.ClientResourceKind.Script, DeclaringType=typeof(DowJones.Web.Mvc.Search.UI.Components.Builders.FreeText.FreeTextSearchBuilderComponent))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorViewComponentClassGenerator", "1.0.0.22175")]
    public class FreeTextSearchBuilderComponent : DowJones.Web.Mvc.Search.UI.Components.Builders.QueryBuilderComponent<DowJones.Web.Mvc.Search.UI.Components.Builders.FreeText.FreeTextSearchBuilder>
    {
#line hidden

        public FreeTextSearchBuilderComponent()
        {
        }
        public override string ClientPluginName
        {
            get
            {
                return "dj_FreeTextSearchBuilder";
            }
        }
        public override void ExecuteTemplate()
        {












   CssClass += "dj_FreeTextSearchBuilder"; 


  
	DJ.ScriptRegistry().WithJQueryUIWidgets();
	DJ.CalloutPopup();



Write(Html.Hidden("kind", "freetext"));

WriteLiteral("\r\n");



WriteLiteral("\r\n<!-- QUERY SUMMARY COMPONENT -->\r\n<div class=\"dj_query-summary ui-component\">\r\n" +
"\t<ul>\r\n\t\t<li>\r\n\t\t\t<div class=\"label\">");


                 Write(DJ.Token("search"));

WriteLiteral("</div>\r\n\t\t</li>\r\n\t\t<li class=\"section-category\">");


                          Write(DJ.Token("wordsPhrases"));

WriteLiteral("</li>\r\n\t\t<li class=\"ellipsis\">");


                  Write(Model.FreeText);

WriteLiteral("</li>\r\n\t\t<li class=\"section-category\">");


                          Write(DJ.Token("date"));

WriteLiteral("</li>\r\n\t\t<li class=\"ellipsis\">");


                  Write(DJ.Token(Model.DateRange));

WriteLiteral("</li>\r\n\t\t<li class=\"section-category\">");


                          Write(DJ.Token("sourcesLabel"));

WriteLiteral("</li>\r\n\t\t<li class=\"ellipsis\">");


                  Write(DJ.DisplayFilters(Model.Source, "allSources"));

WriteLiteral("</li>\r\n\t</ul>\r\n\t<div class=\"clear-expand\">\r\n\t\t<span class=\"more\" title=\'");


                       Write(Token("showMore"));

WriteLiteral("\'>");


                                           Write(Token("more"));

WriteLiteral("</span>\r\n\t</div>\r\n\t<div class=\"dj_save-search\">\r\n\t\t<span class=\"dj_btn dj_btn-lrg" +
" dj_btn-gray dj_btn-rounded-square save-as_btn\">\r\n\t\t\t");


Write(DJ.Token("saveAs"));

WriteLiteral("\r\n\t\t\t<span class=\"dj_btn-down-arrow\"></span></span><span class=\'dj_btn dj_btn-lrg" +
" dj_btn-blue dj_btn-rounded-square no-margin modifySearch\' title=\'");


                                                                                                                                            Write(Token("modifySearch"));

WriteLiteral("\'>");


                                                                                                                                                                    Write(Token("modifySearch"));

WriteLiteral(@"</span>
	</div>
	<!-- end: .dj_save-search -->
</div>
<!-- end: .dj_query-summary -->
<!-- end: dj_search-phrases -->
<!-- This is the content of the more callout located in the query summary -->
<table class='dj_query-summary-table hide'>
	<thead>
		<tr>
			<th scope=""col"">
				");


Write(DJ.Token("categoryFilter"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<th scope=\"col\">\r\n\t\t\t\t");


Write(DJ.Token("query"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("wordsPhrases"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t<label>");


      Write(Model.FreeText);

WriteLiteral("</label>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("searchIn"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.Token(Model.FreeTextIn));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("date"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t<label>");


      Write(DJ.Token(Model.DateRange));

WriteLiteral("</label>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("sortBy"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.Token(Model.Sort));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("duplicates"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(Model.DeduplicationMode);

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t");



WriteLiteral("\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("exclusions"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.CombineEnums(Model.Exclusions, "allExclusions"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("sourcesLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t<label>");


      Write(DJ.DisplayFilters(Model.Source, "allSources"));

WriteLiteral("</label>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("languageLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.CombineLanguages(Model.Languages, "allLanguages"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("companyLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.DisplayFilters(Model.Company, "allCompanies"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("authorLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.DisplayFilters(Model.Author, "allAuthors"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("executiveLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.DisplayFilters(Model.Executive, "allExecutives"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("subjectLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.DisplayFilters(Model.Subject, "allSubjects"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("industryLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.DisplayFilters(Model.Industry, "allIndustries"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"row\">\r\n\t\t\t\t");


Write(DJ.Token("regionLabel"));

WriteLiteral("\r\n\t\t\t</th>\r\n\t\t\t<td headers=\"itemcolumn col1\">\r\n\t\t\t\t");


Write(DJ.DisplayFilters(Model.Region, "allRegions"));

WriteLiteral("\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n<!-- Save As Menu -->\r\n<div class=\"menu" +
" saveAsMenu\" style=\"display: none;\">\r\n\t<div class=\"menuitems\">\r\n");


  		
			foreach (SelectListItem menu in Model.SaveOptions)
			{

WriteLiteral("\t\t\t<div class=\"menuitem\">\r\n\t\t\t\t<div class=\"label\" data-saveas=\"");


                               Write(menu.Value);

WriteLiteral("\">");


                                            Write(menu.Text);

WriteLiteral("</div>\r\n\t\t\t</div>\r\n");


			}
		

WriteLiteral("\t</div>\r\n</div>\r\n<!-- Save As Menu -->\r\n");


        }
    }
}
