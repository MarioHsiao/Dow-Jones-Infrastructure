@using System.Web.Mvc
@using DowJones.Web.Mvc.UI.Components.Models
@model DowJones.Web.Mvc.UI.Components.Models.OutletListModel
@ClientPlugin dj_OutletList
@ScriptResource RelativeResourceName=OutletList.js
@{ CssClass = "dj_OutletList"; }
@{
	uint runningSum = @Model.FirstRecordIndex;
	uint i = 0;

}
@if (Model != null)
{
	string sort = "<span class='dj_sortable-table-columnUp'></span>";
	if (Model.SortOrder == OrderDirections.Descending)
	{
		sort = "<span class='dj_sortable-table-columnDown'></span>";
	}
	<script type="text/javascript">
		$(document).ready(function () {

			var ids = $("#selected_outlet_ids").val();
			if (ids == "") return;

			var idarr = ids.split(",");
			$("td input:checkbox").each(function () {
				var $this = $(this);
				var id = $this.attr("outletlist-aid");
				var idx = $.inArray(id, idarr);
				if (idx > -1) {
					$this.attr("checked", true);
				}
			});

		});
	</script>
	
	<input type="hidden" id="outlet_list_sort_by" value="@(EnumDescription.StringValueOf(Model.SortBy))" />
	<input type="hidden" id="outlet_list_sort_order" value="@(EnumDescription.StringValueOf(Model.SortOrder))" />
	<input type="hidden" id="selected_outlet_ids" value="@Model.SelectedOutletIds" />
	<table class="dj_data_table-sorter dj_data_table dj_author-list-table">
		<colgroup>
			<col class="dj_data_table-select-col" />
			<col class="dj_data_table-col1" />
			<col class="dj_data_table-col2" />
			<col class="dj_data_table-col3" />
			<col class="dj_data_table-col4" />
			<col class="dj_data_table-col5" />
			<col class="dj_data_table-col6" />
			<col class="dj_data_table-col7" />
			
			<col class="dj_data_table-col8" />
			<col class="dj_data_table-col9" />
			<col class="dj_data_table-col10" />
			<col class="dj_data_table-col11" />
			<col class="dj_data_table-col12" />
			<col class="dj_data_table-col13" />
			<col class="dj_data_table-col14" />
			<col class="dj_data_table-col15" />
		</colgroup>
		<thead>
			<tr>
				<th scope="col"></th>
				<th scope="col"></th>
				<th scope="col" class="dj_sortable-table-header" data-sort="outlet">
					@Model.Tokens.OutletName
					@(Model.SortBy == OutletListSortColumns.OutletName ? sort : "")
				</th>
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Circulation))
				{ 
					<th scope="col" class="dj_sortable-table-header" data-sort="circulation" style="text-align:right">
						@Model.Tokens.Circulation
						@(Model.SortBy == OutletListSortColumns.Circulation ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Country))
				{ 
					<th scope="col" class="dj_sortable-table-header" data-sort="country">
						@Model.Tokens.Country
						@(Model.SortBy == OutletListSortColumns.Country ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.MediaFormat))
				{ 
					<th scope="col" class="dj_sortable-table-header" data-sort="mediaformat">
						@Model.Tokens.MediaFormat
						@(Model.SortBy == OutletListSortColumns.MediaFormat ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.OutletType))
				{ 
					<th scope="col" class="dj_sortable-table-header" data-sort="outlettype">
						@Model.Tokens.OutletType
						@(Model.SortBy == OutletListSortColumns.OutletType ? sort : "")
					</th>
				}
@*              new columns*@
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Language))
				{ 
					<th scope="col" class="dj_sortable-table-column" data-sort="language">
						@Model.Tokens.Language
						@(Model.SortBy == OutletListSortColumns.Language ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Frequency))
				{ 
					<th scope="col" class="dj_sortable-table-header" data-sort="frequency">
						@Model.Tokens.Frequency
						@(Model.SortBy == OutletListSortColumns.Frequency ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Coverage))
				{ 
					<th scope="col" class="dj_sortable-table-header" data-sort="coverage">
						@Model.Tokens.Coverage
						@(Model.SortBy == OutletListSortColumns.Coverage ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Industries))
				{ 
					<th scope="col" class="dj_sortable-table-column" data-sort="industries">
						@Model.Tokens.Industries
						@(Model.SortBy == OutletListSortColumns.Industries ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Subjects))
				{ 
					<th scope="col" class="dj_sortable-table-column" data-sort="subjects">
						@Model.Tokens.Subjects
						@(Model.SortBy == OutletListSortColumns.Subjects ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Regions))
				{ 
					<th scope="col" class="dj_sortable-table-column" data-sort="regions">
						@Model.Tokens.Regions
						@(Model.SortBy == OutletListSortColumns.Regions ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Publisher))
				{ 
					<th scope="col" class="dj_sortable-table-header" data-sort="publisher">
						@Model.Tokens.Publisher
						@(Model.SortBy == OutletListSortColumns.Publisher ? sort : "")
					</th>
				}
				@if (Model.DisplayedColumns.Contains(OutletListSortColumns.UserAddedInfo))
				{ 
					<th scope="col" class="dj_sortable-table-column" data-sort="useraddedinfo">
						@Model.Tokens.UserAddedInfo
						@(Model.SortBy == OutletListSortColumns.UserAddedInfo ? sort : "")
					</th>
				}
			</tr>
		</thead>
		<tbody class="dj_data_table-scroll">
		@foreach (var outlet in Model.Outlets)
  {
	  string oddClass = ++i % 2 == 0 ? "" : " class='odd'";
				<tr@(oddClass)>
					<td class="dj_data_table-select-col">
						<input name="dj_outlet-select" type="checkbox" outletlist-aid='@outlet.OutletId'/>
					</td>
					<td class="dj_num-col">@(runningSum++).</td>
					<td class="dj_sortable-sorted"><a href="javascript:void(0);" class="outlet-selector">@outlet.OutletName</a></td>
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Circulation))
	 { 
						<td align="right">
							   @if (outlet.Circulation > 0)
			 {
									@outlet.Circulation.ToString("0,0", System.Globalization.CultureInfo.InvariantCulture)
			 }
			 else
			 {
									<span></span>
			 }
						</td>
	 }
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Country))
					{ 
						<td>@outlet.Country</td>
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.MediaFormat))
					{ 
						<td>@outlet.MediaFormat.Name</td>
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.OutletType))
					{ 
						<td>@outlet.OutletType.Name</td>
					}
@*                    new columns*@
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Language))
					{
						if (outlet.Languages == null || outlet.Languages.Count == 0)
						{
							<td></td> 
						}
						else
						{  
							<td>@outlet.GetLanguagesText().Replace("|", "<br />")</td>
						}
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Frequency))
					{
						if (outlet.Frequency == null)
						{
							<td></td>
						}
						else
						{ 
							<td>@outlet.Frequency.Name</td>
						}
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Coverage))
					{ 
						<td>@outlet.Coverage</td>
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Industries))
					{
						if (outlet.IndustryEditorialFocus == null || outlet.IndustryEditorialFocus.Count == 0)
						{
							<td></td> 
						}
						else
						{ 
							<td>@outlet.GetIndustriesText().Replace("|", "<br />")</td>
						}
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Subjects))
					{
						if (outlet.SubjectEditorialFocus == null || outlet.SubjectEditorialFocus.Count == 0)
						{
							<td></td> 
						}
						else
						{ 
							<td>@outlet.GetSubjectsText().Replace("|", "<br />")</td>
						}
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Regions))
					{
						if (outlet.RegionEditorialFocus == null || outlet.RegionEditorialFocus.Count == 0)
						{
							<td></td> 
						}
						else
						{ 
							<td>@outlet.GetRegionsText().Replace("|", "<br />")</td>
						}
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.Publisher))
					{ 
						<td>@outlet.Publisher</td>
					}
					@if (Model.DisplayedColumns.Contains(OutletListSortColumns.UserAddedInfo))
					{
						if (outlet.UserAddedInformation == null)
						{
							<td></td> 
						}
						else
						{ 
							<td>@(new MvcHtmlString(outlet.GetUserAddedInfoText()))
							</td>
						}
					}
			 </tr>
  }
		</tbody>
	</table>
		<!-- Save As Menu -->
	<div class="menu actionsMenu" style="display:none;">
		<div class="menuitems">
		@{
  foreach (var menu in Model.Actions)
  {
				<div class="menuitem">
					<div class="label" data-action="@menu.Value">@menu.Text</div>
				</div>
  }
		}
		</div>
	</div>
	<!-- Save As Menu -->
}
else
{
	 <span class="dj_noResults">@Model.Tokens.NoResults</span>
}
