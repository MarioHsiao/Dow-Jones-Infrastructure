//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl.js", "text/javascript")]
[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl.css", "text/css")]
[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlClientTemplate.htm", "text/html")]
[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlCloudTemplate.htm", "text/html")]
[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlDateTemplate.htm", "text/html")]
[assembly: System.Web.UI.WebResourceAttribute("DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlListTemplate.htm", "text/html")]

namespace DowJones.Web.Mvc.UI.Components.Discovery
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Security;
    using System.Web.UI;
    using DowJones.Web.Mvc.Extensions;
    
    // Last Generated Timestamp: 03/25/2011 09:22 AM
    [DowJones.Web.ScriptResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl.js", ResourceKind=DowJones.Web.ClientResourceKind.Script, DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl))]
    [DowJones.Web.StylesheetResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl.css", ResourceKind=DowJones.Web.ClientResourceKind.Stylesheet, DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl))]
    [DowJones.Web.ClientTemplateResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlClientTemplate.htm", ResourceKind=DowJones.Web.ClientResourceKind.ClientTemplate, TemplateId="dsccontent", DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl))]
    [DowJones.Web.ClientTemplateResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlCloudTemplate.htm", ResourceKind=DowJones.Web.ClientResourceKind.ClientTemplate, TemplateId="dsccloud", DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl))]
    [DowJones.Web.ClientTemplateResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlDateTemplate.htm", ResourceKind=DowJones.Web.ClientResourceKind.ClientTemplate, TemplateId="dscdate", DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl))]
    [DowJones.Web.ClientTemplateResourceAttribute(null, ResourceName="DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControlListTemplate.htm", ResourceKind=DowJones.Web.ClientResourceKind.ClientTemplate, TemplateId="dsclist", DeclaringType=typeof(DowJones.Web.Mvc.UI.Components.Discovery.DiscoveryControl))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorViewComponentClassGenerator", "0.9.3.26911")]
    public class DiscoveryControl : DowJones.Web.Mvc.UI.ViewComponentBase<DowJones.Web.Mvc.UI.Components.Models.Discovery.DiscoveryModel>
    {
#line hidden

        public DiscoveryControl()
        {
        }
        public override string ClientPluginName
        {
            get
            {
                return "dj_Discovery";
            }
        }
        public override void ExecuteTemplate()
        {









   CssClass = "dj_Discovery"; 

WriteLiteral("\r\n");



WriteLiteral("\r\n\r\n");


 if (Model != null && Model.DiscoveryCollection != null && Model.DiscoveryCollection.Count > 0)
{

WriteLiteral("    <div class=\"sections\">\r\n");


         foreach (var list in Model.DiscoveryCollection)
        {
            if (list != null && list.DiscoveryItems.Count > 0)
            {
                switch (list.ChartType)
                {
                    case DowJones.Web.Mvc.UI.Components.Models.Discovery.DiscoveryChartTypes.TagCloud:

WriteLiteral("                        <div class=\"section\">            \r\n                      " +
"      <h3 class=\"title\">");


                                         Write(list.Title);

WriteLiteral("</h3>\r\n                            <div class=\"cloud\">\r\n");


                                 foreach (var k in list.DiscoveryItems)
                                { 

WriteLiteral("                                    <span class=\"item\" data-type=\"text\" data-name" +
"=\"");


                                                                              Write(k.Value);

WriteLiteral("\" data-value=\"");


                                                                                                    Write(k.Id);

WriteLiteral("\">\r\n                                        <a class=\"size-");


                                                  Write(Math.Ceiling(k.ShareOfTop / 20));

WriteLiteral("\" href=\"#\">");


                                                                                             Write(k.Value);

WriteLiteral("</a>\r\n                                    </span>\r\n");


                                }

WriteLiteral("                            </div>\r\n                        </div>\r\n");


                        break;
                    case DowJones.Web.Mvc.UI.Components.Models.Discovery.DiscoveryChartTypes.DateNavigator:
                        var top = list.Top;

WriteLiteral("                        <div class=\"section\">\r\n                            <h3 cl" +
"ass=\"title\">");


                                         Write(list.Title);

WriteLiteral(@"</h3>
                            <div class=""chart clearfix"">
                                <div class=""grid-row-one grid-col-one"">
	                                <div class=""y"">
	                                    <div class=""y-item y-item-one""><span class=""y-item-label"">");


                                                                                           Write((top * .2).ToString("0"));

WriteLiteral("</span></div>\r\n\t                                    <div class=\"y-item y-item-two" +
"\"><span class=\"y-item-label\">");


                                                                                           Write((top * .4).ToString("0"));

WriteLiteral("</span></div>\r\n\t                                    <div class=\"y-item y-item-thr" +
"ee\"><span class=\"y-item-label\">");


                                                                                             Write((top * .6).ToString("0"));

WriteLiteral("</span></div>\r\n\t                                    <div class=\"y-item y-item-fou" +
"r\"><span class=\"y-item-label\">");


                                                                                            Write((top * .8).ToString("0"));

WriteLiteral("</span></div>\r\n\t                                    <div class=\"y-item y-item-fiv" +
"e\"><span class=\"y-item-label\">");


                                                                                            Write(top);

WriteLiteral(@"</span></div>
	                                </div>
                                </div>
                                <div class=""grid-row-one grid-col-two"">
	                                <table class=""canvas"" cellpadding=""0"" cellspacing=0>
                                        <tr>
");


                                             foreach (var b in list.DiscoveryItems)
                                            {

WriteLiteral("                                                <td class=\"item\" data-type=\"date\"" +
", data-name=\"");


                                                                                         Write(b.Id);

WriteLiteral("\" data-value=\"");


                                                                                                            Write(b.Count);

WriteLiteral("\" >\r\n                                                    <a class=\"bar\"title=\"");


                                                                    Write(b.Id);

WriteLiteral(" - ");


                                                                            Write(b.Count);

WriteLiteral(" hits\" style=\"height:");


                                                                                                         Write(b.ShareOfTop);

WriteLiteral("%;\"></a>\r\n                                                </td>\r\n");


                                            }

WriteLiteral(@"                                        </tr>
                                    </table>
                                </div>
                                <div class=""grid-row-two grid-col-one""></div>
                                <div class=""grid-row-two grid-col-two"">
                                    <div class=""x"">
");


                                         for (int i = 0; i < list.DiscoveryItems.Count; i++)
                                        {

WriteLiteral("\t                                        <div class=\"x-item\" style=\"left:");


                                                                     Write((((float)i / (float)list.DiscoveryItems.Count) * 100) + 2);

WriteLiteral("%\">\r\n\t                                            <span class=\"x-itemLabel\">");


                                                                   Write(list.DiscoveryItems[i].Value);

WriteLiteral("</span>\r\n    \t                                    </div>\r\n");


                                        }

WriteLiteral("                                    </div>\r\n                                </div" +
">\r\n                            </div>\r\n                        </div>\r\n");


                            break;
                    default:

WriteLiteral("                        <div class=\"section\">\r\n                            <h3 cl" +
"ass=\"title\">");


                                         Write(list.Title);

WriteLiteral("</h3>\r\n                            <ol class=\"list\">\r\n");


                                 foreach (var b in list.DiscoveryItems)
                                {

WriteLiteral("                                    <li class=\"item\" data-type=\"");


                                                           Write(list.DataTypeCode);

WriteLiteral("\" data-name=\"");


                                                                                          Write(b.Value);

WriteLiteral("\" data-value=\"");


                                                                                                                Write(b.Id);

WriteLiteral("\">\r\n                                        <a class=\"title\" title=\"");


                                                           Write(b.Value);

WriteLiteral("\" href=\"#\">");


                                                                              Write(b.Value);

WriteLiteral("</a>\r\n                                        <span class=\"wrapper\">\r\n           " +
"                                 <span class=\"bar\" title=\"");


                                                                Write(b.Value);

WriteLiteral("\" style=\"width:");


                                                                                       Write(b.ShareOfTop);

WriteLiteral("%;\">\r\n                                                <span class=\"value\">");


                                                                Write(b.Count > 0 ? b.Count : b.Count);

WriteLiteral("</span>\r\n                                            </span>\r\n                   " +
"                     </span>\r\n                                    </li>\r\n");


                                }

WriteLiteral("                            </ol>\r\n                        </div>\r\n");


                         break;
                }
            }
        }

WriteLiteral("    </div>\r\n");


}


        }
    }
}
