//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using DowJones.Properties;

namespace DowJones.Tools.ServiceLayer.WebServices
{
    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.42.
    // 


    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.42")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "FactivaSuggestsSoap", Namespace = "urn:factiva:fcp:v1_0")]
    public class FactivaSuggests : SoapHttpClientProtocol
    {
        private SendOrPostCallback GetExecutiveDataStatisticsOperationCompleted;

        private SendOrPostCallback GetPackageIdOperationCompleted;
        private SendOrPostCallback SuggestAuthorOperationCompleted;
        private SendOrPostCallback SuggestByTypesOperationCompleted;

        private SendOrPostCallback SuggestCompanyOperationCompleted;

        private SendOrPostCallback SuggestExecutiveOperationCompleted;
        private SendOrPostCallback SuggestGenericListOperationCompleted;
        private SendOrPostCallback SuggestIndustryOperationCompleted;
        private SendOrPostCallback SuggestNewsSubjectOperationCompleted;

        private SendOrPostCallback SuggestOutletOperationCompleted;
        private SendOrPostCallback SuggestRegionOperationCompleted;
        private SendOrPostCallback SuggestSourceOperationCompleted;

        /// <remarks/>
        public FactivaSuggests()
        {
            var _url = Settings.Default.SuggestServiceURL;
            Url = _url;
        }

        /// <remarks/>
        public event SuggestByTypesCompletedEventHandler SuggestByTypesCompleted;

        /// <remarks/>
        public event SuggestRegionCompletedEventHandler SuggestRegionCompleted;

        /// <remarks/>
        public event SuggestNewsSubjectCompletedEventHandler SuggestNewsSubjectCompleted;

        /// <remarks/>
        public event SuggestIndustryCompletedEventHandler SuggestIndustryCompleted;

        /// <remarks/>
        public event SuggestGenericListCompletedEventHandler SuggestGenericListCompleted;

        /// <remarks/>
        public event SuggestCompanyCompletedEventHandler SuggestCompanyCompleted;

        /// <remarks/>
        public event SuggestExecutiveCompletedEventHandler SuggestExecutiveCompleted;

        /// <remarks/>
        public event SuggestSourceCompletedEventHandler SuggestSourceCompleted;

        /// <remarks/>
        public event SuggestAuthorCompletedEventHandler SuggestAuthorCompleted;

        /// <remarks/>
        public event SuggestOutletCompletedEventHandler SuggestOutletCompleted;

        /// <remarks/>
        public event GetExecutiveDataStatisticsCompletedEventHandler GetExecutiveDataStatisticsCompleted;

        /// <remarks/>
        public event GetPackageIdCompletedEventHandler GetPackageIdCompleted;

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestByTypes", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SuggestedByTypesList SuggestByTypes(listType[] ListTypes, string SearchText, int MaxResults,
                                                   string Language, codeStatus CodeStatus, visibility Visibility,
                                                   bool IncludeOtherData, filter FilterNewsCoded, filter FilterDJ,
                                                   filter FilterFCE, filter FilterCQS, string Package)
        {
            object[] results = Invoke("SuggestByTypes", new object[]
                                                            {
                                                                ListTypes,
                                                                SearchText,
                                                                MaxResults,
                                                                Language,
                                                                CodeStatus,
                                                                Visibility,
                                                                IncludeOtherData,
                                                                FilterNewsCoded,
                                                                FilterDJ,
                                                                FilterFCE,
                                                                FilterCQS,
                                                                Package
                                                            });
            return ((SuggestedByTypesList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestByTypes(listType[] ListTypes, string SearchText, int MaxResults, string Language,
                                                codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData,
                                                filter FilterNewsCoded, filter FilterDJ, filter FilterFCE,
                                                filter FilterCQS, string Package, AsyncCallback callback,
                                                object asyncState)
        {
            return BeginInvoke("SuggestByTypes", new object[]
                                                     {
                                                         ListTypes,
                                                         SearchText,
                                                         MaxResults,
                                                         Language,
                                                         CodeStatus,
                                                         Visibility,
                                                         IncludeOtherData,
                                                         FilterNewsCoded,
                                                         FilterDJ,
                                                         FilterFCE,
                                                         FilterCQS,
                                                         Package
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public SuggestedByTypesList EndSuggestByTypes(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SuggestedByTypesList)(results[0]));
        }

        /// <remarks/>
        public void SuggestByTypesAsync(listType[] ListTypes, string SearchText, int MaxResults, string Language,
                                        codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData,
                                        filter FilterNewsCoded, filter FilterDJ, filter FilterFCE, filter FilterCQS,
                                        string Package)
        {
            SuggestByTypesAsync(ListTypes, SearchText, MaxResults, Language, CodeStatus, Visibility, IncludeOtherData,
                                FilterNewsCoded, FilterDJ, FilterFCE, FilterCQS, Package, null);
        }

        /// <remarks/>
        public void SuggestByTypesAsync(listType[] ListTypes, string SearchText, int MaxResults, string Language,
                                        codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData,
                                        filter FilterNewsCoded, filter FilterDJ, filter FilterFCE, filter FilterCQS,
                                        string Package, object userState)
        {
            if ((SuggestByTypesOperationCompleted == null))
            {
                SuggestByTypesOperationCompleted = new SendOrPostCallback(OnSuggestByTypesOperationCompleted);
            }
            InvokeAsync("SuggestByTypes", new object[]
                                              {
                                                  ListTypes,
                                                  SearchText,
                                                  MaxResults,
                                                  Language,
                                                  CodeStatus,
                                                  Visibility,
                                                  IncludeOtherData,
                                                  FilterNewsCoded,
                                                  FilterDJ,
                                                  FilterFCE,
                                                  FilterCQS,
                                                  Package
                                              }, SuggestByTypesOperationCompleted, userState);
        }

        private void OnSuggestByTypesOperationCompleted(object arg)
        {
            if ((SuggestByTypesCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestByTypesCompleted(this,
                                        new SuggestByTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestRegion", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SugestedTaxonomyList SuggestRegion(string SearchText, int MaxResults, regionType RegionType,
                                                  string Language, codeStatus CodeStatus, visibility Visibility,
                                                  bool IncludeOtherData)
        {
            object[] results = Invoke("SuggestRegion", new object[]
                                                           {
                                                               SearchText,
                                                               MaxResults,
                                                               RegionType,
                                                               Language,
                                                               CodeStatus,
                                                               Visibility,
                                                               IncludeOtherData
                                                           });
            return ((SugestedTaxonomyList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestRegion(string SearchText, int MaxResults, regionType RegionType, string Language,
                                               codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData,
                                               AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestRegion", new object[]
                                                    {
                                                        SearchText,
                                                        MaxResults,
                                                        RegionType,
                                                        Language,
                                                        CodeStatus,
                                                        Visibility,
                                                        IncludeOtherData
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public SugestedTaxonomyList EndSuggestRegion(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SugestedTaxonomyList)(results[0]));
        }

        /// <remarks/>
        public void SuggestRegionAsync(string SearchText, int MaxResults, regionType RegionType, string Language,
                                       codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData)
        {
            SuggestRegionAsync(SearchText, MaxResults, RegionType, Language, CodeStatus, Visibility, IncludeOtherData,
                               null);
        }

        /// <remarks/>
        public void SuggestRegionAsync(string SearchText, int MaxResults, regionType RegionType, string Language,
                                       codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData,
                                       object userState)
        {
            if ((SuggestRegionOperationCompleted == null))
            {
                SuggestRegionOperationCompleted = new SendOrPostCallback(OnSuggestRegionOperationCompleted);
            }
            InvokeAsync("SuggestRegion", new object[]
                                             {
                                                 SearchText,
                                                 MaxResults,
                                                 RegionType,
                                                 Language,
                                                 CodeStatus,
                                                 Visibility,
                                                 IncludeOtherData
                                             }, SuggestRegionOperationCompleted, userState);
        }

        private void OnSuggestRegionOperationCompleted(object arg)
        {
            if ((SuggestRegionCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestRegionCompleted(this,
                                       new SuggestRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestNewsSubject", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SugestedTaxonomyList SuggestNewsSubject(string SearchText, int MaxResults, string Language,
                                                       codeStatus CodeStatus, visibility Visibility,
                                                       bool IncludeOtherData)
        {
            object[] results = Invoke("SuggestNewsSubject", new object[]
                                                                {
                                                                    SearchText,
                                                                    MaxResults,
                                                                    Language,
                                                                    CodeStatus,
                                                                    Visibility,
                                                                    IncludeOtherData
                                                                });
            return ((SugestedTaxonomyList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestNewsSubject(string SearchText, int MaxResults, string Language,
                                                    codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData,
                                                    AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestNewsSubject", new object[]
                                                         {
                                                             SearchText,
                                                             MaxResults,
                                                             Language,
                                                             CodeStatus,
                                                             Visibility,
                                                             IncludeOtherData
                                                         }, callback, asyncState);
        }

        /// <remarks/>
        public SugestedTaxonomyList EndSuggestNewsSubject(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SugestedTaxonomyList)(results[0]));
        }

        /// <remarks/>
        public void SuggestNewsSubjectAsync(string SearchText, int MaxResults, string Language, codeStatus CodeStatus,
                                            visibility Visibility, bool IncludeOtherData)
        {
            SuggestNewsSubjectAsync(SearchText, MaxResults, Language, CodeStatus, Visibility, IncludeOtherData, null);
        }

        /// <remarks/>
        public void SuggestNewsSubjectAsync(string SearchText, int MaxResults, string Language, codeStatus CodeStatus,
                                            visibility Visibility, bool IncludeOtherData, object userState)
        {
            if ((SuggestNewsSubjectOperationCompleted == null))
            {
                SuggestNewsSubjectOperationCompleted = new SendOrPostCallback(OnSuggestNewsSubjectOperationCompleted);
            }
            InvokeAsync("SuggestNewsSubject", new object[]
                                                  {
                                                      SearchText,
                                                      MaxResults,
                                                      Language,
                                                      CodeStatus,
                                                      Visibility,
                                                      IncludeOtherData
                                                  }, SuggestNewsSubjectOperationCompleted, userState);
        }

        private void OnSuggestNewsSubjectOperationCompleted(object arg)
        {
            if ((SuggestNewsSubjectCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestNewsSubjectCompleted(this,
                                            new SuggestNewsSubjectCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestIndustry", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SugestedTaxonomyList SuggestIndustry(string SearchText, int MaxResults, string Language,
                                                    codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData)
        {
            object[] results = Invoke("SuggestIndustry", new object[]
                                                             {
                                                                 SearchText,
                                                                 MaxResults,
                                                                 Language,
                                                                 CodeStatus,
                                                                 Visibility,
                                                                 IncludeOtherData
                                                             });
            return ((SugestedTaxonomyList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestIndustry(string SearchText, int MaxResults, string Language,
                                                 codeStatus CodeStatus, visibility Visibility, bool IncludeOtherData,
                                                 AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestIndustry", new object[]
                                                      {
                                                          SearchText,
                                                          MaxResults,
                                                          Language,
                                                          CodeStatus,
                                                          Visibility,
                                                          IncludeOtherData
                                                      }, callback, asyncState);
        }

        /// <remarks/>
        public SugestedTaxonomyList EndSuggestIndustry(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SugestedTaxonomyList)(results[0]));
        }

        /// <remarks/>
        public void SuggestIndustryAsync(string SearchText, int MaxResults, string Language, codeStatus CodeStatus,
                                         visibility Visibility, bool IncludeOtherData)
        {
            SuggestIndustryAsync(SearchText, MaxResults, Language, CodeStatus, Visibility, IncludeOtherData, null);
        }

        /// <remarks/>
        public void SuggestIndustryAsync(string SearchText, int MaxResults, string Language, codeStatus CodeStatus,
                                         visibility Visibility, bool IncludeOtherData, object userState)
        {
            if ((SuggestIndustryOperationCompleted == null))
            {
                SuggestIndustryOperationCompleted = new SendOrPostCallback(OnSuggestIndustryOperationCompleted);
            }
            InvokeAsync("SuggestIndustry", new object[]
                                               {
                                                   SearchText,
                                                   MaxResults,
                                                   Language,
                                                   CodeStatus,
                                                   Visibility,
                                                   IncludeOtherData
                                               }, SuggestIndustryOperationCompleted, userState);
        }

        private void OnSuggestIndustryOperationCompleted(object arg)
        {
            if ((SuggestIndustryCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestIndustryCompleted(this,
                                         new SuggestIndustryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                               invokeArgs.Cancelled,
                                                                               invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestGenericList", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SugestedGenericList SuggestGenericList(string SearchText, int MaxResults, string ListType,
                                                      string ListSubType, string Language, bool IncludeOtherData)
        {
            object[] results = Invoke("SuggestGenericList", new object[]
                                                                {
                                                                    SearchText,
                                                                    MaxResults,
                                                                    ListType,
                                                                    ListSubType,
                                                                    Language,
                                                                    IncludeOtherData
                                                                });
            return ((SugestedGenericList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestGenericList(string SearchText, int MaxResults, string ListType,
                                                    string ListSubType, string Language, bool IncludeOtherData,
                                                    AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestGenericList", new object[]
                                                         {
                                                             SearchText,
                                                             MaxResults,
                                                             ListType,
                                                             ListSubType,
                                                             Language,
                                                             IncludeOtherData
                                                         }, callback, asyncState);
        }

        /// <remarks/>
        public SugestedGenericList EndSuggestGenericList(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SugestedGenericList)(results[0]));
        }

        /// <remarks/>
        public void SuggestGenericListAsync(string SearchText, int MaxResults, string ListType, string ListSubType,
                                            string Language, bool IncludeOtherData)
        {
            SuggestGenericListAsync(SearchText, MaxResults, ListType, ListSubType, Language, IncludeOtherData, null);
        }

        /// <remarks/>
        public void SuggestGenericListAsync(string SearchText, int MaxResults, string ListType, string ListSubType,
                                            string Language, bool IncludeOtherData, object userState)
        {
            if ((SuggestGenericListOperationCompleted == null))
            {
                SuggestGenericListOperationCompleted = new SendOrPostCallback(OnSuggestGenericListOperationCompleted);
            }
            InvokeAsync("SuggestGenericList", new object[]
                                                  {
                                                      SearchText,
                                                      MaxResults,
                                                      ListType,
                                                      ListSubType,
                                                      Language,
                                                      IncludeOtherData
                                                  }, SuggestGenericListOperationCompleted, userState);
        }

        private void OnSuggestGenericListOperationCompleted(object arg)
        {
            if ((SuggestGenericListCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestGenericListCompleted(this,
                                            new SuggestGenericListCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestCompany", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SugestedCompanyList SuggestCompany(string SearchText, int MaxResults, filter FilterNewsCoded,
                                                  filter FilterFCE, filter FilterCQS, string Package)
        {
            object[] results = Invoke("SuggestCompany", new object[]
                                                            {
                                                                SearchText,
                                                                MaxResults,
                                                                FilterNewsCoded,
                                                                FilterFCE,
                                                                FilterCQS,
                                                                Package
                                                            });
            return ((SugestedCompanyList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestCompany(string SearchText, int MaxResults, filter FilterNewsCoded,
                                                filter FilterFCE, filter FilterCQS, string Package,
                                                AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestCompany", new object[]
                                                     {
                                                         SearchText,
                                                         MaxResults,
                                                         FilterNewsCoded,
                                                         FilterFCE,
                                                         FilterCQS,
                                                         Package
                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public SugestedCompanyList EndSuggestCompany(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SugestedCompanyList)(results[0]));
        }

        /// <remarks/>
        public void SuggestCompanyAsync(string SearchText, int MaxResults, filter FilterNewsCoded, filter FilterFCE,
                                        filter FilterCQS, string Package)
        {
            SuggestCompanyAsync(SearchText, MaxResults, FilterNewsCoded, FilterFCE, FilterCQS, Package, null);
        }

        /// <remarks/>
        public void SuggestCompanyAsync(string SearchText, int MaxResults, filter FilterNewsCoded, filter FilterFCE,
                                        filter FilterCQS, string Package, object userState)
        {
            if ((SuggestCompanyOperationCompleted == null))
            {
                SuggestCompanyOperationCompleted = new SendOrPostCallback(OnSuggestCompanyOperationCompleted);
            }
            InvokeAsync("SuggestCompany", new object[]
                                              {
                                                  SearchText,
                                                  MaxResults,
                                                  FilterNewsCoded,
                                                  FilterFCE,
                                                  FilterCQS,
                                                  Package
                                              }, SuggestCompanyOperationCompleted, userState);
        }

        private void OnSuggestCompanyOperationCompleted(object arg)
        {
            if ((SuggestCompanyCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestCompanyCompleted(this,
                                        new SuggestCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestExecutive", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SuggestedExecutiveList SuggestExecutive(string SearchText, int MaxResults, filter FilterNewsCoded,
                                                       filter FilterDJ, string Package, bool IncludeJobs)
        {
            object[] results = Invoke("SuggestExecutive", new object[]
                                                              {
                                                                  SearchText,
                                                                  MaxResults,
                                                                  FilterNewsCoded,
                                                                  FilterDJ,
                                                                  Package,
                                                                  IncludeJobs
                                                              });
            return ((SuggestedExecutiveList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestExecutive(string SearchText, int MaxResults, filter FilterNewsCoded,
                                                  filter FilterDJ, string Package, bool IncludeJobs,
                                                  AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestExecutive", new object[]
                                                       {
                                                           SearchText,
                                                           MaxResults,
                                                           FilterNewsCoded,
                                                           FilterDJ,
                                                           Package,
                                                           IncludeJobs
                                                       }, callback, asyncState);
        }

        /// <remarks/>
        public SuggestedExecutiveList EndSuggestExecutive(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SuggestedExecutiveList)(results[0]));
        }

        /// <remarks/>
        public void SuggestExecutiveAsync(string SearchText, int MaxResults, filter FilterNewsCoded, filter FilterDJ,
                                          string Package, bool IncludeJobs)
        {
            SuggestExecutiveAsync(SearchText, MaxResults, FilterNewsCoded, FilterDJ, Package, IncludeJobs, null);
        }

        /// <remarks/>
        public void SuggestExecutiveAsync(string SearchText, int MaxResults, filter FilterNewsCoded, filter FilterDJ,
                                          string Package, bool IncludeJobs, object userState)
        {
            if ((SuggestExecutiveOperationCompleted == null))
            {
                SuggestExecutiveOperationCompleted = new SendOrPostCallback(OnSuggestExecutiveOperationCompleted);
            }
            InvokeAsync("SuggestExecutive", new object[]
                                                {
                                                    SearchText,
                                                    MaxResults,
                                                    FilterNewsCoded,
                                                    FilterDJ,
                                                    Package,
                                                    IncludeJobs
                                                }, SuggestExecutiveOperationCompleted, userState);
        }

        private void OnSuggestExecutiveOperationCompleted(object arg)
        {
            if ((SuggestExecutiveCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestExecutiveCompleted(this,
                                          new SuggestExecutiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                 invokeArgs.Cancelled,
                                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestSource", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SuggestedSourceList SuggestSource(string SearchText, int MaxResults, SourceType[] sourceTypes,
                                                 SourceStatus[] sourceStatuses, string[] languageCode,
                                                 bool includeGroups)
        {
            object[] results = Invoke("SuggestSource", new object[]
                                                           {
                                                               SearchText,
                                                               MaxResults,
                                                               sourceTypes,
                                                               sourceStatuses,
                                                               languageCode,
                                                               includeGroups
                                                           });
            return ((SuggestedSourceList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestSource(string SearchText, int MaxResults, SourceType[] sourceTypes,
                                               SourceStatus[] sourceStatuses, string[] languageCode, bool includeGroups,
                                               AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestSource", new object[]
                                                    {
                                                        SearchText,
                                                        MaxResults,
                                                        sourceTypes,
                                                        sourceStatuses,
                                                        languageCode,
                                                        includeGroups
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public SuggestedSourceList EndSuggestSource(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SuggestedSourceList)(results[0]));
        }

        /// <remarks/>
        public void SuggestSourceAsync(string SearchText, int MaxResults, SourceType[] sourceTypes,
                                       SourceStatus[] sourceStatuses, string[] languageCode, bool includeGroups)
        {
            SuggestSourceAsync(SearchText, MaxResults, sourceTypes, sourceStatuses, languageCode, includeGroups, null);
        }

        /// <remarks/>
        public void SuggestSourceAsync(string SearchText, int MaxResults, SourceType[] sourceTypes,
                                       SourceStatus[] sourceStatuses, string[] languageCode, bool includeGroups,
                                       object userState)
        {
            if ((SuggestSourceOperationCompleted == null))
            {
                SuggestSourceOperationCompleted = new SendOrPostCallback(OnSuggestSourceOperationCompleted);
            }
            InvokeAsync("SuggestSource", new object[]
                                             {
                                                 SearchText,
                                                 MaxResults,
                                                 sourceTypes,
                                                 sourceStatuses,
                                                 languageCode,
                                                 includeGroups
                                             }, SuggestSourceOperationCompleted, userState);
        }

        private void OnSuggestSourceOperationCompleted(object arg)
        {
            if ((SuggestSourceCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestSourceCompleted(this,
                                       new SuggestSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestAuthor", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SuggestedAuthorList SuggestAuthor(string SearchText, int MaxResults, string[] OutletIdFilters,
                                                 string[] CountryIdFilters, filter FilterDJ, string Package)
        {
            object[] results = Invoke("SuggestAuthor", new object[]
                                                           {
                                                               SearchText,
                                                               MaxResults,
                                                               OutletIdFilters,
                                                               CountryIdFilters,
                                                               FilterDJ,
                                                               Package
                                                           });
            return ((SuggestedAuthorList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestAuthor(string SearchText, int MaxResults, string[] OutletIdFilters,
                                               string[] CountryIdFilters, filter FilterDJ, string Package,
                                               AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("SuggestAuthor", new object[]
                                                    {
                                                        SearchText,
                                                        MaxResults,
                                                        OutletIdFilters,
                                                        CountryIdFilters,
                                                        FilterDJ,
                                                        Package
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public SuggestedAuthorList EndSuggestAuthor(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SuggestedAuthorList)(results[0]));
        }

        /// <remarks/>
        public void SuggestAuthorAsync(string SearchText, int MaxResults, string[] OutletIdFilters,
                                       string[] CountryIdFilters, filter FilterDJ, string Package)
        {
            SuggestAuthorAsync(SearchText, MaxResults, OutletIdFilters, CountryIdFilters, FilterDJ, Package, null);
        }

        /// <remarks/>
        public void SuggestAuthorAsync(string SearchText, int MaxResults, string[] OutletIdFilters,
                                       string[] CountryIdFilters, filter FilterDJ, string Package, object userState)
        {
            if ((SuggestAuthorOperationCompleted == null))
            {
                SuggestAuthorOperationCompleted = new SendOrPostCallback(OnSuggestAuthorOperationCompleted);
            }
            InvokeAsync("SuggestAuthor", new object[]
                                             {
                                                 SearchText,
                                                 MaxResults,
                                                 OutletIdFilters,
                                                 CountryIdFilters,
                                                 FilterDJ,
                                                 Package
                                             }, SuggestAuthorOperationCompleted, userState);
        }

        private void OnSuggestAuthorOperationCompleted(object arg)
        {
            if ((SuggestAuthorCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestAuthorCompleted(this,
                                       new SuggestAuthorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/SuggestOutlet", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public SuggestedOutletList SuggestOutlet(string SearchText, int MaxResults, string[] CountryIdFilters,
                                                 filter FilterDJ, string Package)
        {
            object[] results = Invoke("SuggestOutlet", new object[]
                                                           {
                                                               SearchText,
                                                               MaxResults,
                                                               CountryIdFilters,
                                                               FilterDJ,
                                                               Package
                                                           });
            return ((SuggestedOutletList)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginSuggestOutlet(string SearchText, int MaxResults, string[] CountryIdFilters,
                                               filter FilterDJ, string Package, AsyncCallback callback,
                                               object asyncState)
        {
            return BeginInvoke("SuggestOutlet", new object[]
                                                    {
                                                        SearchText,
                                                        MaxResults,
                                                        CountryIdFilters,
                                                        FilterDJ,
                                                        Package
                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public SuggestedOutletList EndSuggestOutlet(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((SuggestedOutletList)(results[0]));
        }

        /// <remarks/>
        public void SuggestOutletAsync(string SearchText, int MaxResults, string[] CountryIdFilters, filter FilterDJ,
                                       string Package)
        {
            SuggestOutletAsync(SearchText, MaxResults, CountryIdFilters, FilterDJ, Package, null);
        }

        /// <remarks/>
        public void SuggestOutletAsync(string SearchText, int MaxResults, string[] CountryIdFilters, filter FilterDJ,
                                       string Package, object userState)
        {
            if ((SuggestOutletOperationCompleted == null))
            {
                SuggestOutletOperationCompleted = new SendOrPostCallback(OnSuggestOutletOperationCompleted);
            }
            InvokeAsync("SuggestOutlet", new object[]
                                             {
                                                 SearchText,
                                                 MaxResults,
                                                 CountryIdFilters,
                                                 FilterDJ,
                                                 Package
                                             }, SuggestOutletOperationCompleted, userState);
        }

        private void OnSuggestOutletOperationCompleted(object arg)
        {
            if ((SuggestOutletCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                SuggestOutletCompleted(this,
                                       new SuggestOutletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/GetExecutiveDataStatistics", RequestNamespace = "urn:factiva:fcp:v1_0"
            , ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public string[] GetExecutiveDataStatistics()
        {
            object[] results = Invoke("GetExecutiveDataStatistics", new object[0]);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetExecutiveDataStatistics(AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetExecutiveDataStatistics", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string[] EndGetExecutiveDataStatistics(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }

        /// <remarks/>
        public void GetExecutiveDataStatisticsAsync()
        {
            GetExecutiveDataStatisticsAsync(null);
        }

        /// <remarks/>
        public void GetExecutiveDataStatisticsAsync(object userState)
        {
            if ((GetExecutiveDataStatisticsOperationCompleted == null))
            {
                GetExecutiveDataStatisticsOperationCompleted =
                    new SendOrPostCallback(OnGetExecutiveDataStatisticsOperationCompleted);
            }
            InvokeAsync("GetExecutiveDataStatistics", new object[0], GetExecutiveDataStatisticsOperationCompleted,
                        userState);
        }

        private void OnGetExecutiveDataStatisticsOperationCompleted(object arg)
        {
            if ((GetExecutiveDataStatisticsCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetExecutiveDataStatisticsCompleted(this,
                                                    new GetExecutiveDataStatisticsCompletedEventArgs(
                                                        invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:factiva:fcp:v1_0/GetPackageId", RequestNamespace = "urn:factiva:fcp:v1_0",
            ResponseNamespace = "urn:factiva:fcp:v1_0", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Wrapped)]
        public string GetPackageId(string AuthorizationData)
        {
            object[] results = Invoke("GetPackageId", new object[]
                                                          {
                                                              AuthorizationData
                                                          });
            return ((string)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetPackageId(string AuthorizationData, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("GetPackageId", new object[]
                                                   {
                                                       AuthorizationData
                                                   }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetPackageId(IAsyncResult asyncResult)
        {
            object[] results = EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPackageIdAsync(string AuthorizationData)
        {
            GetPackageIdAsync(AuthorizationData, null);
        }

        /// <remarks/>
        public void GetPackageIdAsync(string AuthorizationData, object userState)
        {
            if ((GetPackageIdOperationCompleted == null))
            {
                GetPackageIdOperationCompleted = new SendOrPostCallback(OnGetPackageIdOperationCompleted);
            }
            InvokeAsync("GetPackageId", new object[]
                                            {
                                                AuthorizationData
                                            }, GetPackageIdOperationCompleted, userState);
        }

        private void OnGetPackageIdOperationCompleted(object arg)
        {
            if ((GetPackageIdCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs)(arg));
                GetPackageIdCompleted(this,
                                      new GetPackageIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public enum listType
    {
        /// <remarks/>
        FactivaIndustry,

        /// <remarks/>
        FactivaNewsSubject,

        /// <remarks/>
        FactivaRegion_All,

        /// <remarks/>
        FactivaRegion_Country,

        /// <remarks/>
        FactivaRegion_MetropolitanArea,

        /// <remarks/>
        FactivaRegion_SubNationalRegion,

        /// <remarks/>
        FactivaRegion_StateOrProvince,

        /// <remarks/>
        FactivaRegion_SupranationalRegion,

        /// <remarks/>
        Company,

        /// <remarks/>
        Executive,

        /// <remarks/>
        SIC,

        /// <remarks/>
        NACE,

        /// <remarks/>
        NAICS,

        /// <remarks/>
        CITY,

        /// <remarks/>
        EXECTITLE,

        /// <remarks/>
        AUDITORS,

        /// <remarks/>
        FCEBANKS,

        /// <remarks/>
        FIRSTNAME,

        /// <remarks/>
        LASTNAME,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public enum codeStatus
    {
        /// <remarks/>
        All,

        /// <remarks/>
        Active,

        /// <remarks/>
        Inactive,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public enum visibility
    {
        /// <remarks/>
        All,

        /// <remarks/>
        Visible,

        /// <remarks/>
        InVisible,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public enum filter
    {
        /// <remarks/>
        None,

        /// <remarks/>
        True,

        /// <remarks/>
        False,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SuggestedByTypesList
    {
        private int countField;
        private suggestionList[] suggestionListsField;

        /// <remarks/>
        public suggestionList[] suggestionLists
        {
            get { return suggestionListsField; }
            set { suggestionListsField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }
    }

    /// <remarks/>
    [XmlInclude(typeof(suggestionListTaxonomy))]
    [XmlInclude(typeof(suggestionListGeneric))]
    [XmlInclude(typeof(suggestionListCompany))]
    [XmlInclude(typeof(suggestionListExecutive))]
    [XmlInclude(typeof(suggestionListSource))]
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public abstract class suggestionList
    {
        private listType listTypeField;

        /// <remarks/>
        public listType listType
        {
            get { return listTypeField; }
            set { listTypeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class Outlet
    {
        private string codeField;

        private string countryIdField;

        private string countryNameField;
        private string formalNameField;

        /// <remarks/>
        [XmlAttribute]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string formalName
        {
            get { return formalNameField; }
            set { formalNameField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string countryId
        {
            get { return countryIdField; }
            set { countryIdField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string countryName
        {
            get { return countryNameField; }
            set { countryNameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SuggestedOutletList
    {
        private int countField;
        private Outlet[] outletsField;

        /// <remarks/>
        [XmlElement("outlets")]
        public Outlet[] outlets
        {
            get { return outletsField; }
            set { outletsField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class Author
    {
        private string codeField;
        private string countryIdField;

        private string countryNameField;

        private string formalNameField;

        private string outletIdField;

        private string outletNameField;

        /// <remarks/>
        [XmlAttribute]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string formalName
        {
            get { return formalNameField; }
            set { formalNameField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string outletId
        {
            get { return outletIdField; }
            set { outletIdField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string outletName
        {
            get { return outletNameField; }
            set { outletNameField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string countryId
        {
            get { return countryIdField; }
            set { countryIdField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string countryName
        {
            get { return countryNameField; }
            set { countryNameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SuggestedAuthorList
    {
        private Author[] authorsField;

        private int countField;

        /// <remarks/>
        [XmlElement("authors")]
        public Author[] authors
        {
            get { return authorsField; }
            set { authorsField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class taxonomy
    {
        private bool activeField;

        private bool childrenField;
        private string codeField;
        private string descriptorField;

        private string otherDataField;

        private string regionTypeField;
        private bool visibleField;

        /// <remarks/>
        public string descriptor
        {
            get { return descriptorField; }
            set { descriptorField = value; }
        }

        /// <remarks/>
        public string otherData
        {
            get { return otherDataField; }
            set { otherDataField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool active
        {
            get { return activeField; }
            set { activeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool visible
        {
            get { return visibleField; }
            set { visibleField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool children
        {
            get { return childrenField; }
            set { childrenField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string regionType
        {
            get { return regionTypeField; }
            set { regionTypeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SugestedTaxonomyList
    {
        private int countField;
        private info infoField;
        private string languageField;

        private taxonomy[] taxonomyField;

        private string typeField;

        /// <remarks/>
        public info info
        {
            get { return infoField; }
            set { infoField = value; }
        }

        /// <remarks/>
        [XmlElement("taxonomy")]
        public taxonomy[] taxonomy
        {
            get { return taxonomyField; }
            set { taxonomyField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string language
        {
            get { return languageField; }
            set { languageField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class info
    {
        private string cpuTimeField;

        private string elapsedTimeField;
        private int hitsField;

        /// <remarks/>
        [XmlAttribute]
        public int hits
        {
            get { return hitsField; }
            set { hitsField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string cpuTime
        {
            get { return cpuTimeField; }
            set { cpuTimeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string elapsedTime
        {
            get { return elapsedTimeField; }
            set { elapsedTimeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class genericList
    {
        private string codeField;
        private string descriptorField;

        private string otherDataField;

        private string subTypeField;

        /// <remarks/>
        public string descriptor
        {
            get { return descriptorField; }
            set { descriptorField = value; }
        }

        /// <remarks/>
        public string otherData
        {
            get { return otherDataField; }
            set { otherDataField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string subType
        {
            get { return subTypeField; }
            set { subTypeField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SugestedGenericList
    {
        private int countField;
        private genericList[] genericListField;

        private string languageField;
        private string typeField;

        /// <remarks/>
        public info info { get; set; }

        /// <remarks/>
        [XmlElement("genericList")]
        public genericList[] genericList
        {
            get { return genericListField; }
            set { genericListField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string language
        {
            get { return languageField; }
            set { languageField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class company
    {
        private string cityField;

        private string codeField;
        private string countryField;

        private string dunsField;

        private bool inCQSField;
        private bool inFCEField;

        private bool isADRField;
        private bool isNewsCodedField;
        private string ricField;
        private string stateField;
        private string[] textField;
        private string tickerField;

        /// <remarks/>
        public string city
        {
            get { return cityField; }
            set { cityField = value; }
        }

        /// <remarks/>
        public string state
        {
            get { return stateField; }
            set { stateField = value; }
        }

        /// <remarks/>
        public string country
        {
            get { return countryField; }
            set { countryField = value; }
        }

        /// <remarks/>
        [XmlText]
        public string[] Text
        {
            get { return textField; }
            set { textField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string ticker
        {
            get { return tickerField; }
            set { tickerField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string ric
        {
            get { return ricField; }
            set { ricField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string duns
        {
            get { return dunsField; }
            set { dunsField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool isNewsCoded
        {
            get { return isNewsCodedField; }
            set { isNewsCodedField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool inFCE
        {
            get { return inFCEField; }
            set { inFCEField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool inCQS
        {
            get { return inCQSField; }
            set { inCQSField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool isADR
        {
            get { return isADRField; }
            set { isADRField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SugestedCompanyList
    {
        private company[] companyField;

        private int countField;
        private info infoField;

        private string packageField;

        /// <remarks/>
        public info info
        {
            get { return infoField; }
            set { infoField = value; }
        }

        /// <remarks/>
        [XmlElement("company")]
        public company[] company
        {
            get { return companyField; }
            set { companyField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string package
        {
            get { return packageField; }
            set { packageField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class Job
    {
        private bool boardMembershipField;
        private string djOrgCodeField;

        private bool isNewsCodedField;

        private bool isPrimaryField;
        private string orgNameField;

        private string valueField;

        /// <remarks/>
        [XmlAttribute]
        public string djOrgCode
        {
            get { return djOrgCodeField; }
            set { djOrgCodeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string orgName
        {
            get { return orgNameField; }
            set { orgNameField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool isNewsCoded
        {
            get { return isNewsCodedField; }
            set { isNewsCodedField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool isPrimary
        {
            get { return isPrimaryField; }
            set { isPrimaryField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool boardMembership
        {
            get { return boardMembershipField; }
            set { boardMembershipField = value; }
        }

        /// <remarks/>
        [XmlText]
        public string Value
        {
            get { return valueField; }
            set { valueField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class executive
    {
        private string codeField;

        private string coFcodeField;

        private string companyNameField;

        private bool isNewsCodedField;
        private Job[] jobsField;
        private string jobTitleField;
        private string[] textField;

        /// <remarks/>
        [XmlArrayItem("job", IsNullable = false)]
        public Job[] jobs
        {
            get { return jobsField; }
            set { jobsField = value; }
        }

        /// <remarks/>
        [XmlText]
        public string[] Text
        {
            get { return textField; }
            set { textField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string jobTitle
        {
            get { return jobTitleField; }
            set { jobTitleField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string coFcode
        {
            get { return coFcodeField; }
            set { coFcodeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string companyName
        {
            get { return companyNameField; }
            set { companyNameField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool isNewsCoded
        {
            get { return isNewsCodedField; }
            set { isNewsCodedField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SuggestedExecutiveList
    {
        private int countField;
        private executive[] executiveField;

        private string packageField;

        /// <remarks/>
        [XmlElement("executive")]
        public executive[] executive
        {
            get { return executiveField; }
            set { executiveField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string package
        {
            get { return packageField; }
            set { packageField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class source
    {
        private string codeField;

        private string formalNameField;

        private bool isGroupField;

        private string statusField;
        private string typeField;

        /// <remarks/>
        [XmlAttribute]
        public string code
        {
            get { return codeField; }
            set { codeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string formalName
        {
            get { return formalNameField; }
            set { formalNameField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string type
        {
            get { return typeField; }
            set { typeField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public bool isGroup
        {
            get { return isGroupField; }
            set { isGroupField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string status
        {
            get { return statusField; }
            set { statusField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class SuggestedSourceList
    {
        private int countField;
        private source[] sourcesField;

        /// <remarks/>
        [XmlElement("sources")]
        public source[] sources
        {
            get { return sourcesField; }
            set { sourcesField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public int count
        {
            get { return countField; }
            set { countField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class suggestionListTaxonomy : suggestionList
    {
        private SugestedTaxonomyList taxonomyListField;

        /// <remarks/>
        public SugestedTaxonomyList taxonomyList
        {
            get { return taxonomyListField; }
            set { taxonomyListField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class suggestionListGeneric : suggestionList
    {
        private SugestedGenericList genericListField;

        /// <remarks/>
        public SugestedGenericList genericList
        {
            get { return genericListField; }
            set { genericListField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class suggestionListCompany : suggestionList
    {
        private SugestedCompanyList companyListField;

        /// <remarks/>
        public SugestedCompanyList companyList
        {
            get { return companyListField; }
            set { companyListField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class suggestionListExecutive : suggestionList
    {
        private SuggestedExecutiveList execListField;

        /// <remarks/>
        public SuggestedExecutiveList execList
        {
            get { return execListField; }
            set { execListField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public class suggestionListSource : suggestionList
    {
        private SuggestedSourceList sourceListField;

        /// <remarks/>
        public SuggestedSourceList sourceList
        {
            get { return sourceListField; }
            set { sourceListField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public enum regionType
    {
        /// <remarks/>
        All,

        /// <remarks/>
        CNTRY,

        /// <remarks/>
        SP,

        /// <remarks/>
        MA,

        /// <remarks/>
        SNR,

        /// <remarks/>
        SR,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public enum SourceType
    {
        /// <remarks/>
        all,

        /// <remarks/>
        publication,

        /// <remarks/>
        webpage,

        /// <remarks/>
        report,

        /// <remarks/>
        mrktdata,

        /// <remarks/>
        inventory,

        /// <remarks/>
        file,

        /// <remarks/>
        picture,

        /// <remarks/>
        billingrec,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [Serializable]
    [XmlType(Namespace = "urn:factiva:fcp:v1_0")]
    public enum SourceStatus
    {
        /// <remarks/>
        all,

        /// <remarks/>
        active,

        /// <remarks/>
        pending,

        /// <remarks/>
        discont,

        /// <remarks/>
        nodisplay,
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestByTypesCompletedEventHandler(object sender, SuggestByTypesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestByTypesCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestByTypesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SuggestedByTypesList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SuggestedByTypesList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestRegionCompletedEventHandler(object sender, SuggestRegionCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestRegionCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestRegionCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SugestedTaxonomyList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SugestedTaxonomyList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestNewsSubjectCompletedEventHandler(object sender, SuggestNewsSubjectCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestNewsSubjectCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestNewsSubjectCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                      object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SugestedTaxonomyList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SugestedTaxonomyList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestIndustryCompletedEventHandler(object sender, SuggestIndustryCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestIndustryCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestIndustryCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                   object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SugestedTaxonomyList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SugestedTaxonomyList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestGenericListCompletedEventHandler(object sender, SuggestGenericListCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestGenericListCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestGenericListCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                      object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SugestedGenericList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SugestedGenericList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestCompanyCompletedEventHandler(object sender, SuggestCompanyCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestCompanyCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestCompanyCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SugestedCompanyList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SugestedCompanyList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestExecutiveCompletedEventHandler(object sender, SuggestExecutiveCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestExecutiveCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestExecutiveCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                    object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SuggestedExecutiveList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SuggestedExecutiveList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestSourceCompletedEventHandler(object sender, SuggestSourceCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestSourceCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestSourceCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SuggestedSourceList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SuggestedSourceList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestAuthorCompletedEventHandler(object sender, SuggestAuthorCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestAuthorCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestAuthorCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SuggestedAuthorList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SuggestedAuthorList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void SuggestOutletCompletedEventHandler(object sender, SuggestOutletCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SuggestOutletCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal SuggestOutletCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SuggestedOutletList Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((SuggestedOutletList)(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetExecutiveDataStatisticsCompletedEventHandler(
        object sender, GetExecutiveDataStatisticsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetExecutiveDataStatisticsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal GetExecutiveDataStatisticsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                              object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[])(results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void GetPackageIdCompletedEventHandler(object sender, GetPackageIdCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetPackageIdCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal GetPackageIdCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }
}